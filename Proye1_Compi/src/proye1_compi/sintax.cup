package proye1_compi;
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
:}

/* define how to connect to the scanner! */
//init with {: s.init(); :};
//scan with {: return s.next_token(); :};
init with {::};
scan with {:return lex.next_token();:};


/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, UMINUS, PRODUCT, DIVISION, POWER, MODULUS, LPAREN, RPAREN, INTEGER_LITERAL;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal            IDENTIFIER, STRING_LITERAL, EQEQ, BREAK, BOOLEAN, ABSTRACT, EQ, DOT;
terminal            DIFF, NEGATION, GRATHER, GRATHERT, LOWER, LOWERT, AND, OR, SEP;
terminal            FLOATNUM, INT, CHAR, FLOAT, BOOL;
terminal            TRUE, FALSE;
terminal            IF, ELSE, WHILE, FOR, IN, RANGE, SWITCH, CASE;
terminal            FUNC, MAIN, PARAM, LOC, GLOBAL, BRAKE, DEFAULT, RETURN, PRINT, READ;
terminal            PARENTS, PARENTC, SQUARES, SQUAREC, DELIMETERBLOCK;
terminal            ENDEXPR;

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions
non terminal            SI, mathOP, varAsig, BLOCK;


/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DIVISION;

/* The grammar rules */    

start with SI;

SI ::= BLOCK;

BLOCK  ::=  SI mathOP
       |SI varAsig
       |mathOP  
       |varAsig;    
        

mathOP       ::= mathOP PLUS mathOP        {:System.out.println("Se sumo");:}
             | mathOP MINUS mathOP         {:System.out.println("Se resto");:}
             | mathOP TIMES mathOP         {:System.out.println("Se multiplico");:}  
             | mathOP DIVISION mathOP      {:System.out.println("Se dividio");:}                 
             | INTEGER_LITERAL; 

varAsig      ::= IDENTIFIER EQ INTEGER_LITERAL ENDEXPR       {:System.out.println("Se asigno");:}
                 |IDENTIFIER EQ STRING_LITERAL ENDEXPR       {:System.out.println("Se asigno");:};