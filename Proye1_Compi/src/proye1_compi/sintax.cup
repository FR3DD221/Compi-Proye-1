package proye1_compi;
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
:}

/* define how to connect to the scanner! */
//init with {: s.init(); :};
//scan with {: return s.next_token(); :};
init with {::};
scan with {:return lex.next_token();:};


/* Terminals (tokens returned by the scanner). */
terminal            IDENTIFIER, SEMI, PLUS, MINUS, MINUSW, TIMES, UMINUS, PRODUCT, DIVISION, MINPLS, POWER, MODULUS, LPAREN, RPAREN, INTEGER_LITERAL;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal            DELIMETERBLOCK, INT, CHAR, FLOAT, BOOL, FUNC, MAIN, PARAM, STRING_LITERAL, EQEQ, BREAK, BOOLEAN, ABSTRACT, EQ, DOT;
terminal            DIFF, NEGATION, GRATHER, GRATHERT, LOWER, LOWERT, COMPARATION, AND, OR, SEP;
terminal            FLOATNUM;
terminal            TRUE, FALSE;
terminal            IF, ELSE, WHILE, FOR, IN, RANGE, SWITCH, CASE;
terminal            LOC, GLOB, BRAKE, DEFAULT, RETURN, PRINT, INPUT;
terminal            PARENTS, PARENTC, SQUARES, SQUAREC;
terminal            ENDEXPR;

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions
non terminal            SI, varIns, varAsig, BLOCK, compAritOp, factor, term, funcStruc, mainStruc, types;
non terminal            ifStruc, ifElseStruc;
non terminal            exprP, exprLog, exprUni, opRel, opLog;

/* Precedences */
precedence left MINPLS, PLUS, MINUSW;
precedence left PRODUCT;
precedence left DIVISION;

/* The grammar rules */    

start with SI;

SI ::= BLOCK;

//Los distintos tipos que pueden tener una funcion o variable
types ::= INT | CHAR | BOOL | FLOAT;

//Bloque que se usa para el codigo siga un rumbo, vease como la lista de posibles expresiones
BLOCK  ::=  SI exprP ENDEXPR
       | SI varAsig 
       | SI mainStruc
       | SI funcStruc 
       | SI varIns 
       | SI ifStruc 
       | SI ifElseStruc 
       | exprP ENDEXPR
       | mainStruc 
       | funcStruc 
       | varAsig    
       | varIns 
       | ifStruc 
       | ifElseStruc;


//Operaciones aritmeticas simples entre dos numeros
/* Reglas de producción para operaciones aritméticas */
compAritOp ::= term
             | compAritOp MINPLS term  {: System.out.println("Se hizo MULTIPLESIMB"); :}
             | compAritOp PLUS term   {: System.out.println("Se hizo SUMA"); :}
             | compAritOp MINUSW term  {: System.out.println("Se hizo RESTA"); :};

term       ::= factor
             | term PRODUCT factor  {: System.out.println("Se hizo PRODUCTO"); :}
             | term DIVISION factor {: System.out.println("Se hizo COCIENTE"); :};

factor     ::= INTEGER_LITERAL
             | FLOATNUM
             | STRING_LITERAL
             | IDENTIFIER
             | PARENTS compAritOp PARENTC;  


//nuevo intento jiji
exprP ::= exprLog 
      | compAritOp        
      | exprUni;

exprLog ::= compAritOp opRel compAritOp
        | PARENTS exprLog PARENTC
        | TRUE
        | FALSE;

exprUni ::= exprLog opLog exprP       {: System.out.println("Se hizo 1"); :}
        | IDENTIFIER opLog exprP                   {: System.out.println("Se hizo 2"); :}
        | PARENTS exprUni PARENTC    {: System.out.println("Se hizo 3"); :};

opRel ::= GRATHER | GRATHERT | LOWER | LOWERT | DIFF | COMPARATION;
opLog ::= AND | OR;



//Asignación de un valor a una variable
varAsig      ::=
             IDENTIFIER EQ exprP ENDEXPR       {:System.out.println("Se asigno int");:};
        

//Instanciacion simple de variables
varIns       ::= LOC SEP types SEP IDENTIFIER ENDEXPR       {:System.out.println("Se creo variable local");:}
             | GLOB SEP types SEP IDENTIFIER ENDEXPR        {:System.out.println("Se creo variable global");:};

//Declaracion inicial del bloque para las funciones
funcStruc    ::= FUNC SEP INT SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK  {:System.out.println("Se declaro funcion normal");:}
             | FUNC SEP CHAR SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK   {:System.out.println("Se declaro funcion normal");:}
             | FUNC SEP BOOL SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK   {:System.out.println("Se declaro funcion normal");:}
             | FUNC SEP FLOAT SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK  {:System.out.println("Se declaro funcion normal");:}; 

mainStruc    ::= FUNC SEP INT SEP MAIN DELIMETERBLOCK BLOCK DELIMETERBLOCK  {:System.out.println("Se declaro funcion MAIN  ");:}; 


ifStruc      ::= IF PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK   {:System.out.println("Se declaro estructura condicional IF");:};
ifElseStruc  ::= ifStruc ELSE DELIMETERBLOCK BLOCK DELIMETERBLOCK;
