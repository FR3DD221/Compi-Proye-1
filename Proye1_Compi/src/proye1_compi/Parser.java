
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proye1_compi;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\004\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\007\005\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\012\003\000\002" +
    "\012\005\000\002\012\005\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\005" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\003\000\002" +
    "\021\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\006\006\000\002" +
    "\005\010\000\002\005\010\000\002\013\012\000\002\013" +
    "\012\000\002\013\012\000\002\013\012\000\002\014\012" +
    "\000\002\016\011\000\002\017\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\030\004\007\022\030\031\021\034\013\055" +
    "\024\056\011\057\026\060\012\070\017\071\004\077\015" +
    "\001\002\000\004\054\175\001\002\000\034\002\uffee\004" +
    "\uffee\022\uffee\024\uffee\031\uffee\034\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\070\uffee\071\uffee\077\uffee\001\002\000" +
    "\004\103\174\001\002\000\040\006\uffe3\010\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\041\171\043\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\036\053\037\103\uffe3\001\002" +
    "\000\034\002\ufff2\004\ufff2\022\ufff2\024\ufff2\031\ufff2\034" +
    "\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\070\ufff2\071\ufff2" +
    "\077\ufff2\001\002\000\012\052\uffdc\053\uffdc\100\uffdc\103" +
    "\uffdc\001\002\000\004\077\163\001\002\000\040\006\uffe4" +
    "\010\uffe4\013\uffe4\014\uffe4\015\uffe4\043\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\100\uffe4" +
    "\103\uffe4\001\002\000\036\002\uffef\004\uffef\022\uffef\024" +
    "\uffef\031\uffef\034\uffef\055\uffef\056\uffef\057\uffef\060\uffef" +
    "\061\054\070\uffef\071\uffef\077\uffef\001\002\000\020\004" +
    "\041\022\030\034\013\055\024\056\011\057\026\077\015" +
    "\001\002\000\030\006\071\010\073\015\072\043\154\045" +
    "\150\046\151\047\147\050\153\051\152\100\uffe0\103\uffe0" +
    "\001\002\000\004\054\135\001\002\000\006\100\uffdf\103" +
    "\uffdf\001\002\000\004\054\100\001\002\000\040\006\uffe9" +
    "\010\uffe9\013\uffe9\014\uffe9\015\uffe9\043\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\100\uffe9" +
    "\103\uffe9\001\002\000\040\006\uffed\010\uffed\013\062\014" +
    "\063\015\uffed\043\uffed\045\uffed\046\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\100\uffed\103\uffed\001\002\000" +
    "\040\006\uffe5\010\uffe5\013\uffe5\014\uffe5\015\uffe5\043\uffe5" +
    "\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\100\uffe5\103\uffe5\001\002\000\032\002\050\004\007" +
    "\022\030\031\021\034\013\055\024\056\011\057\026\060" +
    "\012\070\017\071\004\077\015\001\002\000\012\052\uffdb" +
    "\053\uffdb\100\uffdb\103\uffdb\001\002\000\034\002\ufff0\004" +
    "\ufff0\022\ufff0\024\ufff0\031\ufff0\034\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\070\ufff0\071\ufff0\077\ufff0\001\002\000" +
    "\040\006\uffe6\010\uffe6\013\uffe6\014\uffe6\015\uffe6\043\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\100\uffe6\103\uffe6\001\002\000\034\002\ufff3\004\ufff3" +
    "\022\ufff3\024\ufff3\031\ufff3\034\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\070\ufff3\071\ufff3\077\ufff3\001\002\000\034" +
    "\002\ufff1\004\ufff1\022\ufff1\024\ufff1\031\ufff1\034\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\060\ufff1\070\ufff1\071\ufff1\077\ufff1" +
    "\001\002\000\012\052\036\053\037\100\uffe1\103\uffe1\001" +
    "\002\000\032\002\000\004\000\022\000\031\000\034\000" +
    "\055\000\056\000\057\000\060\000\070\000\071\000\077" +
    "\000\001\002\000\020\004\041\022\030\034\013\055\024" +
    "\056\011\057\026\077\015\001\002\000\020\004\uffd1\022" +
    "\uffd1\034\uffd1\055\uffd1\056\uffd1\057\uffd1\077\uffd1\001\002" +
    "\000\020\004\uffd0\022\uffd0\034\uffd0\055\uffd0\056\uffd0\057" +
    "\uffd0\077\uffd0\001\002\000\006\100\uffda\103\uffda\001\002" +
    "\000\040\006\uffe3\010\uffe3\013\uffe3\014\uffe3\015\uffe3\043" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\036" +
    "\053\037\100\uffe3\103\uffe3\001\002\000\020\004\041\022" +
    "\030\034\013\055\024\056\011\057\026\077\015\001\002" +
    "\000\006\100\uffd9\103\uffd9\001\002\000\034\002\ufff5\004" +
    "\ufff5\022\ufff5\024\ufff5\031\ufff5\034\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\070\ufff5\071\ufff5\077\ufff5\001\002\000" +
    "\004\103\061\001\002\000\034\002\ufff8\004\ufff8\022\ufff8" +
    "\024\ufff8\031\ufff8\034\ufff8\055\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\070\ufff8\071\ufff8\077\ufff8\001\002\000\036\002\ufff6" +
    "\004\ufff6\022\ufff6\024\ufff6\031\ufff6\034\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\060\ufff6\061\054\070\ufff6\071\ufff6\077\ufff6" +
    "\001\002\000\004\002\001\001\002\000\034\002\ufff7\004" +
    "\ufff7\022\ufff7\024\ufff7\031\ufff7\034\ufff7\055\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\070\ufff7\071\ufff7\077\ufff7\001\002\000" +
    "\034\002\ufff9\004\ufff9\022\ufff9\024\ufff9\031\ufff9\034\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\060\ufff9\070\ufff9\071\ufff9\077" +
    "\ufff9\001\002\000\034\002\ufffa\004\ufffa\022\ufffa\024\ufffa" +
    "\031\ufffa\034\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\070" +
    "\ufffa\071\ufffa\077\ufffa\001\002\000\004\024\055\001\002" +
    "\000\030\004\007\022\030\031\021\034\013\055\024\056" +
    "\011\057\026\060\012\070\017\071\004\077\015\001\002" +
    "\000\030\004\007\022\030\031\021\034\013\055\024\056" +
    "\011\057\026\060\012\070\017\071\004\077\015\001\002" +
    "\000\032\004\000\022\000\024\060\031\000\034\000\055" +
    "\000\056\000\057\000\060\000\070\000\071\000\077\000" +
    "\001\002\000\034\002\uffc6\004\uffc6\022\uffc6\024\uffc6\031" +
    "\uffc6\034\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\070\uffc6" +
    "\071\uffc6\077\uffc6\001\002\000\034\002\ufffb\004\ufffb\022" +
    "\ufffb\024\ufffb\031\ufffb\034\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\060\ufffb\070\ufffb\071\ufffb\077\ufffb\001\002\000\014\004" +
    "\065\022\030\034\013\055\024\077\066\001\002\000\014" +
    "\004\065\022\030\034\013\055\024\077\066\001\002\000" +
    "\040\006\uffe7\010\uffe7\013\uffe7\014\uffe7\015\uffe7\043\uffe7" +
    "\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\100\uffe7\103\uffe7\001\002\000\040\006\uffe3\010\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\043\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\100\uffe3\103\uffe3" +
    "\001\002\000\014\004\065\022\030\034\013\055\024\077" +
    "\066\001\002\000\012\006\071\010\073\015\072\100\070" +
    "\001\002\000\040\006\uffe2\010\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\043\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\100\uffe2\103\uffe2\001\002\000\014\004" +
    "\065\022\030\034\013\055\024\077\066\001\002\000\014" +
    "\004\065\022\030\034\013\055\024\077\066\001\002\000" +
    "\014\004\065\022\030\034\013\055\024\077\066\001\002" +
    "\000\040\006\uffea\010\uffea\013\062\014\063\015\uffea\043" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea" +
    "\053\uffea\100\uffea\103\uffea\001\002\000\040\006\uffec\010" +
    "\uffec\013\062\014\063\015\uffec\043\uffec\045\uffec\046\uffec" +
    "\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\100\uffec\103" +
    "\uffec\001\002\000\040\006\uffeb\010\uffeb\013\062\014\063" +
    "\015\uffeb\043\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\100\uffeb\103\uffeb\001\002\000\040" +
    "\006\uffe8\010\uffe8\013\uffe8\014\uffe8\015\uffe8\043\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\100\uffe8\103\uffe8\001\002\000\012\025\104\026\103\027" +
    "\102\030\101\001\002\000\004\054\130\001\002\000\004" +
    "\054\123\001\002\000\004\054\116\001\002\000\004\054" +
    "\105\001\002\000\006\004\107\032\106\001\002\000\004" +
    "\024\113\001\002\000\004\024\110\001\002\000\030\004" +
    "\007\022\030\031\021\034\013\055\024\056\011\057\026" +
    "\060\012\070\017\071\004\077\015\001\002\000\032\004" +
    "\000\022\000\024\112\031\000\034\000\055\000\056\000" +
    "\057\000\060\000\070\000\071\000\077\000\001\002\000" +
    "\034\002\uffcc\004\uffcc\022\uffcc\024\uffcc\031\uffcc\034\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\060\uffcc\070\uffcc\071\uffcc\077" +
    "\uffcc\001\002\000\030\004\007\022\030\031\021\034\013" +
    "\055\024\056\011\057\026\060\012\070\017\071\004\077" +
    "\015\001\002\000\032\004\000\022\000\024\115\031\000" +
    "\034\000\055\000\056\000\057\000\060\000\070\000\071" +
    "\000\077\000\001\002\000\034\002\uffc8\004\uffc8\022\uffc8" +
    "\024\uffc8\031\uffc8\034\uffc8\055\uffc8\056\uffc8\057\uffc8\060" +
    "\uffc8\070\uffc8\071\uffc8\077\uffc8\001\002\000\004\004\117" +
    "\001\002\000\004\024\120\001\002\000\030\004\007\022" +
    "\030\031\021\034\013\055\024\056\011\057\026\060\012" +
    "\070\017\071\004\077\015\001\002\000\032\004\000\022" +
    "\000\024\122\031\000\034\000\055\000\056\000\057\000" +
    "\060\000\070\000\071\000\077\000\001\002\000\034\002" +
    "\uffcb\004\uffcb\022\uffcb\024\uffcb\031\uffcb\034\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\070\uffcb\071\uffcb\077\uffcb\001" +
    "\002\000\004\004\124\001\002\000\004\024\125\001\002" +
    "\000\030\004\007\022\030\031\021\034\013\055\024\056" +
    "\011\057\026\060\012\070\017\071\004\077\015\001\002" +
    "\000\032\004\000\022\000\024\127\031\000\034\000\055" +
    "\000\056\000\057\000\060\000\070\000\071\000\077\000" +
    "\001\002\000\034\002\uffc9\004\uffc9\022\uffc9\024\uffc9\031" +
    "\uffc9\034\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\070\uffc9" +
    "\071\uffc9\077\uffc9\001\002\000\004\004\131\001\002\000" +
    "\004\024\132\001\002\000\030\004\007\022\030\031\021" +
    "\034\013\055\024\056\011\057\026\060\012\070\017\071" +
    "\004\077\015\001\002\000\032\004\000\022\000\024\134" +
    "\031\000\034\000\055\000\056\000\057\000\060\000\070" +
    "\000\071\000\077\000\001\002\000\034\002\uffca\004\uffca" +
    "\022\uffca\024\uffca\031\uffca\034\uffca\055\uffca\056\uffca\057" +
    "\uffca\060\uffca\070\uffca\071\uffca\077\uffca\001\002\000\012" +
    "\025\142\026\140\027\141\030\137\001\002\000\004\054" +
    "\143\001\002\000\004\054\ufffd\001\002\000\004\054\ufffe" +
    "\001\002\000\004\054\ufffc\001\002\000\004\054\uffff\001" +
    "\002\000\004\004\144\001\002\000\004\103\145\001\002" +
    "\000\034\002\uffce\004\uffce\022\uffce\024\uffce\031\uffce\034" +
    "\uffce\055\uffce\056\uffce\057\uffce\060\uffce\070\uffce\071\uffce" +
    "\077\uffce\001\002\000\014\004\065\022\030\034\013\055" +
    "\024\077\066\001\002\000\014\004\uffd5\022\uffd5\034\uffd5" +
    "\055\uffd5\077\uffd5\001\002\000\014\004\uffd7\022\uffd7\034" +
    "\uffd7\055\uffd7\077\uffd7\001\002\000\014\004\uffd6\022\uffd6" +
    "\034\uffd6\055\uffd6\077\uffd6\001\002\000\014\004\uffd2\022" +
    "\uffd2\034\uffd2\055\uffd2\077\uffd2\001\002\000\014\004\uffd4" +
    "\022\uffd4\034\uffd4\055\uffd4\077\uffd4\001\002\000\014\004" +
    "\uffd3\022\uffd3\034\uffd3\055\uffd3\077\uffd3\001\002\000\020" +
    "\006\071\010\073\015\072\052\uffde\053\uffde\100\uffde\103" +
    "\uffde\001\002\000\026\006\071\010\073\015\072\043\154" +
    "\045\150\046\151\047\147\050\153\051\152\100\070\001" +
    "\002\000\010\052\036\053\037\100\162\001\002\000\004" +
    "\100\161\001\002\000\006\100\uffd8\103\uffd8\001\002\000" +
    "\012\052\uffdd\053\uffdd\100\uffdd\103\uffdd\001\002\000\020" +
    "\004\041\022\030\034\013\055\024\056\011\057\026\077" +
    "\015\001\002\000\004\100\165\001\002\000\004\024\166" +
    "\001\002\000\030\004\007\022\030\031\021\034\013\055" +
    "\024\056\011\057\026\060\012\070\017\071\004\077\015" +
    "\001\002\000\032\004\000\022\000\024\170\031\000\034" +
    "\000\055\000\056\000\057\000\060\000\070\000\071\000" +
    "\077\000\001\002\000\036\002\uffc7\004\uffc7\022\uffc7\024" +
    "\uffc7\031\uffc7\034\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7" +
    "\061\uffc7\070\uffc7\071\uffc7\077\uffc7\001\002\000\020\004" +
    "\041\022\030\034\013\055\024\056\011\057\026\077\015" +
    "\001\002\000\004\103\173\001\002\000\034\002\uffcf\004" +
    "\uffcf\022\uffcf\024\uffcf\031\uffcf\034\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\070\uffcf\071\uffcf\077\uffcf\001\002\000" +
    "\034\002\ufff4\004\ufff4\022\ufff4\024\ufff4\031\ufff4\034\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\070\ufff4\071\ufff4\077" +
    "\ufff4\001\002\000\012\025\142\026\140\027\141\030\137" +
    "\001\002\000\004\054\177\001\002\000\004\004\200\001" +
    "\002\000\004\103\201\001\002\000\034\002\uffcd\004\uffcd" +
    "\022\uffcd\024\uffcd\031\uffcd\034\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\070\uffcd\071\uffcd\077\uffcd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\036\004\024\005\026\006\031\007\033\010" +
    "\015\011\021\012\022\013\007\014\030\016\013\017\004" +
    "\020\005\021\032\022\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\155\011\021" +
    "\012\022\021\156\022\157\001\001\000\004\023\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\050\006\052\010\015\011\021\012\022\013\045" +
    "\014\051\016\046\017\043\020\044\021\032\022\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\034\001" +
    "\001\000\002\001\001\000\016\010\015\011\021\012\022" +
    "\020\037\021\032\022\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\041\001\001" +
    "\000\016\010\015\011\021\012\022\020\042\021\032\022" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\055\005\026\006\031\007" +
    "\056\010\015\011\021\012\022\013\007\014\030\016\013" +
    "\017\004\020\005\021\032\022\017\001\001\000\032\005" +
    "\050\006\052\010\015\011\021\012\022\013\045\014\051" +
    "\016\046\017\043\020\044\021\032\022\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\076\001\001\000\004\011\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\066\011\021\012\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\021\012\075\001\001\000\006\011\021\012\074\001\001" +
    "\000\006\011\021\012\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\055\005\026\006\031\007" +
    "\110\010\015\011\021\012\022\013\007\014\030\016\013" +
    "\017\004\020\005\021\032\022\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\055\005\026\006\031" +
    "\007\113\010\015\011\021\012\022\013\007\014\030\016" +
    "\013\017\004\020\005\021\032\022\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\055\005\026\006\031\007\120\010\015" +
    "\011\021\012\022\013\007\014\030\016\013\017\004\020" +
    "\005\021\032\022\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\055\005\026\006\031\007\125\010\015\011\021\012\022" +
    "\013\007\014\030\016\013\017\004\020\005\021\032\022" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\055\005\026\006" +
    "\031\007\132\010\015\011\021\012\022\013\007\014\030" +
    "\016\013\017\004\020\005\021\032\022\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\154\011\021\012" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\145\001\001\000\004" +
    "\024\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\015\011\021\012\022\020\163" +
    "\021\032\022\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\055\005\026\006\031\007\166\010\015" +
    "\011\021\012\022\013\007\014\030\016\013\017\004\020" +
    "\005\021\032\022\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\015\011\021\012\022\020\171\021" +
    "\032\022\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return lex.next_token();
    }


    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SI ::= BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SI",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // types ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // types ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // types ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // types ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOCK ::= SI exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOCK ::= SI varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOCK ::= SI mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOCK ::= SI funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOCK ::= SI varIns 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOCK ::= SI ifStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOCK ::= SI ifElseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOCK ::= exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOCK ::= mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOCK ::= funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOCK ::= varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOCK ::= varIns 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOCK ::= ifStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOCK ::= ifElseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compAritOp ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compAritOp ::= compAritOp MINPLS term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo MULTIPLESIMB"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compAritOp ::= compAritOp PLUS term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo SUMA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compAritOp ::= compAritOp MINUSW term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo RESTA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= term PRODUCT factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo PRODUCTO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= term DIVISION factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo COCIENTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= FLOATNUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= PARENTS compAritOp PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exprP ::= exprLog 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exprP ::= compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exprP ::= exprUni 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprLog ::= compAritOp opRel compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exprLog ::= PARENTS exprLog PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exprLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exprLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exprUni ::= exprLog opLog exprP 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 1"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprUni ::= IDENTIFIER opLog exprP 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprUni ::= PARENTS exprUni PARENTC 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 3"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // opRel ::= GRATHER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // opRel ::= GRATHERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // opRel ::= LOWER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opRel ::= LOWERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // opRel ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // opRel ::= COMPARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opLog ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opLog ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // varAsig ::= IDENTIFIER EQ exprP ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se asigno int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAsig",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // varIns ::= LOC SEP types SEP IDENTIFIER ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se creo variable local");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // varIns ::= GLOB SEP types SEP IDENTIFIER ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se creo variable global");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcStruc ::= FUNC SEP INT SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funcStruc ::= FUNC SEP CHAR SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcStruc ::= FUNC SEP BOOL SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funcStruc ::= FUNC SEP FLOAT SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mainStruc ::= FUNC SEP INT SEP MAIN DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion MAIN  ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainStruc",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ifStruc ::= IF PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura condicional IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStruc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ifElseStruc ::= ifStruc ELSE DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifElseStruc",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
