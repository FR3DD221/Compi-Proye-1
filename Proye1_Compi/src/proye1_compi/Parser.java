
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proye1_compi;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\004\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\007\005\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\012\003\000\002" +
    "\012\005\000\002\012\005\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\005" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\003\000\002\021" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\024\003\000\002\024\003\000\002\006\006\000\002\005" +
    "\010\000\002\005\010\000\002\013\012\000\002\013\012" +
    "\000\002\013\012\000\002\013\012\000\002\014\012\000" +
    "\002\016\011\000\002\017\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\036\004\010\006\005\010\014\015\012\022" +
    "\033\031\024\035\016\056\027\057\013\060\031\061\015" +
    "\071\021\072\004\100\017\001\002\000\004\055\203\001" +
    "\002\000\014\004\070\022\033\035\016\056\027\100\071" +
    "\001\002\000\042\002\uffee\004\uffee\006\uffee\010\uffee\015" +
    "\uffee\022\uffee\024\uffee\031\uffee\035\uffee\056\uffee\057\uffee" +
    "\060\uffee\061\uffee\071\uffee\072\uffee\100\uffee\001\002\000" +
    "\004\104\201\001\002\000\040\006\uffe3\010\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\042\176\044\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\041\054\042\104\uffe3\001\002" +
    "\000\042\002\ufff2\004\ufff2\006\ufff2\010\ufff2\015\ufff2\022" +
    "\ufff2\024\ufff2\031\ufff2\035\ufff2\056\ufff2\057\ufff2\060\ufff2" +
    "\061\ufff2\071\ufff2\072\ufff2\100\ufff2\001\002\000\014\004" +
    "\070\022\033\035\016\056\027\100\071\001\002\000\012" +
    "\053\uffd9\054\uffd9\101\uffd9\104\uffd9\001\002\000\014\004" +
    "\070\022\033\035\016\056\027\100\071\001\002\000\004" +
    "\100\166\001\002\000\040\006\uffe4\010\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\054\uffe4\101\uffe4\104\uffe4\001\002\000" +
    "\026\004\044\006\005\010\014\015\012\022\033\035\016" +
    "\056\027\057\013\060\031\100\017\001\002\000\044\002" +
    "\uffef\004\uffef\006\uffef\010\uffef\015\uffef\022\uffef\024\uffef" +
    "\031\uffef\035\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062" +
    "\057\071\uffef\072\uffef\100\uffef\001\002\000\004\055\150" +
    "\001\002\000\030\006\074\010\076\015\075\044\146\046" +
    "\142\047\143\050\141\051\145\052\144\101\uffe0\104\uffe0" +
    "\001\002\000\006\101\uffdf\104\uffdf\001\002\000\004\055" +
    "\103\001\002\000\040\006\uffe9\010\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\044\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\101\uffe9\104\uffe9\001\002\000\040" +
    "\006\uffed\010\uffed\013\065\014\066\015\uffed\044\uffed\046" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\101\uffed\104\uffed\001\002\000\040\006\uffe5\010\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\101\uffe5\104\uffe5\001" +
    "\002\000\040\002\053\004\010\006\005\010\014\015\012" +
    "\022\033\031\024\035\016\056\027\057\013\060\031\061" +
    "\015\071\021\072\004\100\017\001\002\000\012\053\uffd8" +
    "\054\uffd8\101\uffd8\104\uffd8\001\002\000\042\002\ufff0\004" +
    "\ufff0\006\ufff0\010\ufff0\015\ufff0\022\ufff0\024\ufff0\031\ufff0" +
    "\035\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\071\ufff0\072" +
    "\ufff0\100\ufff0\001\002\000\040\006\uffe6\010\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\054\uffe6\101\uffe6\104\uffe6\001\002" +
    "\000\042\002\ufff3\004\ufff3\006\ufff3\010\ufff3\015\ufff3\022" +
    "\ufff3\024\ufff3\031\ufff3\035\ufff3\056\ufff3\057\ufff3\060\ufff3" +
    "\061\ufff3\071\ufff3\072\ufff3\100\ufff3\001\002\000\042\002" +
    "\ufff1\004\ufff1\006\ufff1\010\ufff1\015\ufff1\022\ufff1\024\ufff1" +
    "\031\ufff1\035\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\071" +
    "\ufff1\072\ufff1\100\ufff1\001\002\000\012\053\041\054\042" +
    "\101\uffe1\104\uffe1\001\002\000\040\002\000\004\000\006" +
    "\000\010\000\015\000\022\000\031\000\035\000\056\000" +
    "\057\000\060\000\061\000\071\000\072\000\100\000\001" +
    "\002\000\026\004\044\006\005\010\014\015\012\022\033" +
    "\035\016\056\027\057\013\060\031\100\017\001\002\000" +
    "\026\004\uffce\006\uffce\010\uffce\015\uffce\022\uffce\035\uffce" +
    "\056\uffce\057\uffce\060\uffce\100\uffce\001\002\000\026\004" +
    "\uffcd\006\uffcd\010\uffcd\015\uffcd\022\uffcd\035\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\100\uffcd\001\002\000\006\101\uffd7\104" +
    "\uffd7\001\002\000\040\006\uffe3\010\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\041\054\042\101\uffe3\104\uffe3\001\002\000\026" +
    "\004\044\006\005\010\014\015\012\022\033\035\016\056" +
    "\027\057\013\060\031\100\017\001\002\000\006\101\uffd6" +
    "\104\uffd6\001\002\000\042\002\ufff5\004\ufff5\006\ufff5\010" +
    "\ufff5\015\ufff5\022\ufff5\024\ufff5\031\ufff5\035\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\061\ufff5\071\ufff5\072\ufff5\100\ufff5\001" +
    "\002\000\004\104\064\001\002\000\042\002\ufff8\004\ufff8" +
    "\006\ufff8\010\ufff8\015\ufff8\022\ufff8\024\ufff8\031\ufff8\035" +
    "\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\071\ufff8\072\ufff8" +
    "\100\ufff8\001\002\000\044\002\ufff6\004\ufff6\006\ufff6\010" +
    "\ufff6\015\ufff6\022\ufff6\024\ufff6\031\ufff6\035\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\062\057\071\ufff6\072\ufff6\100" +
    "\ufff6\001\002\000\004\002\001\001\002\000\042\002\ufff7" +
    "\004\ufff7\006\ufff7\010\ufff7\015\ufff7\022\ufff7\024\ufff7\031" +
    "\ufff7\035\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\071\ufff7" +
    "\072\ufff7\100\ufff7\001\002\000\042\002\ufff9\004\ufff9\006" +
    "\ufff9\010\ufff9\015\ufff9\022\ufff9\024\ufff9\031\ufff9\035\ufff9" +
    "\056\ufff9\057\ufff9\060\ufff9\061\ufff9\071\ufff9\072\ufff9\100" +
    "\ufff9\001\002\000\042\002\ufffa\004\ufffa\006\ufffa\010\ufffa" +
    "\015\ufffa\022\ufffa\024\ufffa\031\ufffa\035\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\071\ufffa\072\ufffa\100\ufffa\001\002" +
    "\000\004\024\060\001\002\000\036\004\010\006\005\010" +
    "\014\015\012\022\033\031\024\035\016\056\027\057\013" +
    "\060\031\061\015\071\021\072\004\100\017\001\002\000" +
    "\036\004\010\006\005\010\014\015\012\022\033\031\024" +
    "\035\016\056\027\057\013\060\031\061\015\071\021\072" +
    "\004\100\017\001\002\000\040\004\000\006\000\010\000" +
    "\015\000\022\000\024\063\031\000\035\000\056\000\057" +
    "\000\060\000\061\000\071\000\072\000\100\000\001\002" +
    "\000\042\002\uffc3\004\uffc3\006\uffc3\010\uffc3\015\uffc3\022" +
    "\uffc3\024\uffc3\031\uffc3\035\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\071\uffc3\072\uffc3\100\uffc3\001\002\000\042\002" +
    "\ufffb\004\ufffb\006\ufffb\010\ufffb\015\ufffb\022\ufffb\024\ufffb" +
    "\031\ufffb\035\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\071" +
    "\ufffb\072\ufffb\100\ufffb\001\002\000\014\004\070\022\033" +
    "\035\016\056\027\100\071\001\002\000\014\004\070\022" +
    "\033\035\016\056\027\100\071\001\002\000\040\006\uffe7" +
    "\010\uffe7\013\uffe7\014\uffe7\015\uffe7\044\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\101\uffe7" +
    "\104\uffe7\001\002\000\040\006\uffe3\010\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\052\uffe3\053\uffe3\054\uffe3\101\uffe3\104\uffe3\001\002\000" +
    "\014\004\070\022\033\035\016\056\027\100\071\001\002" +
    "\000\012\006\074\010\076\015\075\101\073\001\002\000" +
    "\040\006\uffe2\010\uffe2\013\uffe2\014\uffe2\015\uffe2\044\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054" +
    "\uffe2\101\uffe2\104\uffe2\001\002\000\014\004\070\022\033" +
    "\035\016\056\027\100\071\001\002\000\014\004\070\022" +
    "\033\035\016\056\027\100\071\001\002\000\014\004\070" +
    "\022\033\035\016\056\027\100\071\001\002\000\040\006" +
    "\uffea\010\uffea\013\065\014\066\015\uffea\044\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\101" +
    "\uffea\104\uffea\001\002\000\040\006\uffec\010\uffec\013\065" +
    "\014\066\015\uffec\044\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\101\uffec\104\uffec\001\002" +
    "\000\040\006\uffeb\010\uffeb\013\065\014\066\015\uffeb\044" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\101\uffeb\104\uffeb\001\002\000\040\006\uffe8\010" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\044\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\101\uffe8\104" +
    "\uffe8\001\002\000\012\025\107\026\106\027\105\030\104" +
    "\001\002\000\004\055\133\001\002\000\004\055\126\001" +
    "\002\000\004\055\121\001\002\000\004\055\110\001\002" +
    "\000\006\004\112\032\111\001\002\000\004\024\116\001" +
    "\002\000\004\024\113\001\002\000\036\004\010\006\005" +
    "\010\014\015\012\022\033\031\024\035\016\056\027\057" +
    "\013\060\031\061\015\071\021\072\004\100\017\001\002" +
    "\000\040\004\000\006\000\010\000\015\000\022\000\024" +
    "\115\031\000\035\000\056\000\057\000\060\000\061\000" +
    "\071\000\072\000\100\000\001\002\000\042\002\uffc9\004" +
    "\uffc9\006\uffc9\010\uffc9\015\uffc9\022\uffc9\024\uffc9\031\uffc9" +
    "\035\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\071\uffc9\072" +
    "\uffc9\100\uffc9\001\002\000\036\004\010\006\005\010\014" +
    "\015\012\022\033\031\024\035\016\056\027\057\013\060" +
    "\031\061\015\071\021\072\004\100\017\001\002\000\040" +
    "\004\000\006\000\010\000\015\000\022\000\024\120\031" +
    "\000\035\000\056\000\057\000\060\000\061\000\071\000" +
    "\072\000\100\000\001\002\000\042\002\uffc5\004\uffc5\006" +
    "\uffc5\010\uffc5\015\uffc5\022\uffc5\024\uffc5\031\uffc5\035\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\071\uffc5\072\uffc5\100" +
    "\uffc5\001\002\000\004\004\122\001\002\000\004\024\123" +
    "\001\002\000\036\004\010\006\005\010\014\015\012\022" +
    "\033\031\024\035\016\056\027\057\013\060\031\061\015" +
    "\071\021\072\004\100\017\001\002\000\040\004\000\006" +
    "\000\010\000\015\000\022\000\024\125\031\000\035\000" +
    "\056\000\057\000\060\000\061\000\071\000\072\000\100" +
    "\000\001\002\000\042\002\uffc8\004\uffc8\006\uffc8\010\uffc8" +
    "\015\uffc8\022\uffc8\024\uffc8\031\uffc8\035\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\071\uffc8\072\uffc8\100\uffc8\001\002" +
    "\000\004\004\127\001\002\000\004\024\130\001\002\000" +
    "\036\004\010\006\005\010\014\015\012\022\033\031\024" +
    "\035\016\056\027\057\013\060\031\061\015\071\021\072" +
    "\004\100\017\001\002\000\040\004\000\006\000\010\000" +
    "\015\000\022\000\024\132\031\000\035\000\056\000\057" +
    "\000\060\000\061\000\071\000\072\000\100\000\001\002" +
    "\000\042\002\uffc6\004\uffc6\006\uffc6\010\uffc6\015\uffc6\022" +
    "\uffc6\024\uffc6\031\uffc6\035\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\071\uffc6\072\uffc6\100\uffc6\001\002\000\004\004" +
    "\134\001\002\000\004\024\135\001\002\000\036\004\010" +
    "\006\005\010\014\015\012\022\033\031\024\035\016\056" +
    "\027\057\013\060\031\061\015\071\021\072\004\100\017" +
    "\001\002\000\040\004\000\006\000\010\000\015\000\022" +
    "\000\024\137\031\000\035\000\056\000\057\000\060\000" +
    "\061\000\071\000\072\000\100\000\001\002\000\042\002" +
    "\uffc7\004\uffc7\006\uffc7\010\uffc7\015\uffc7\022\uffc7\024\uffc7" +
    "\031\uffc7\035\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\071" +
    "\uffc7\072\uffc7\100\uffc7\001\002\000\014\004\070\022\033" +
    "\035\016\056\027\100\071\001\002\000\014\004\uffd2\022" +
    "\uffd2\035\uffd2\056\uffd2\100\uffd2\001\002\000\014\004\uffd4" +
    "\022\uffd4\035\uffd4\056\uffd4\100\uffd4\001\002\000\014\004" +
    "\uffd3\022\uffd3\035\uffd3\056\uffd3\100\uffd3\001\002\000\014" +
    "\004\uffcf\022\uffcf\035\uffcf\056\uffcf\100\uffcf\001\002\000" +
    "\014\004\uffd1\022\uffd1\035\uffd1\056\uffd1\100\uffd1\001\002" +
    "\000\014\004\uffd0\022\uffd0\035\uffd0\056\uffd0\100\uffd0\001" +
    "\002\000\020\006\074\010\076\015\075\053\uffde\054\uffde" +
    "\101\uffde\104\uffde\001\002\000\012\025\155\026\153\027" +
    "\154\030\152\001\002\000\004\055\156\001\002\000\004" +
    "\055\ufffd\001\002\000\004\055\ufffe\001\002\000\004\055" +
    "\ufffc\001\002\000\004\055\uffff\001\002\000\004\004\157" +
    "\001\002\000\004\104\160\001\002\000\042\002\uffcb\004" +
    "\uffcb\006\uffcb\010\uffcb\015\uffcb\022\uffcb\024\uffcb\031\uffcb" +
    "\035\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\071\uffcb\072" +
    "\uffcb\100\uffcb\001\002\000\026\006\074\010\076\015\075" +
    "\044\146\046\142\047\143\050\141\051\145\052\144\101" +
    "\073\001\002\000\010\053\041\054\042\101\165\001\002" +
    "\000\004\101\164\001\002\000\006\101\uffd5\104\uffd5\001" +
    "\002\000\012\053\uffdd\054\uffdd\101\uffdd\104\uffdd\001\002" +
    "\000\026\004\044\006\005\010\014\015\012\022\033\035" +
    "\016\056\027\057\013\060\031\100\017\001\002\000\004" +
    "\101\170\001\002\000\004\024\171\001\002\000\036\004" +
    "\010\006\005\010\014\015\012\022\033\031\024\035\016" +
    "\056\027\057\013\060\031\061\015\071\021\072\004\100" +
    "\017\001\002\000\040\004\000\006\000\010\000\015\000" +
    "\022\000\024\173\031\000\035\000\056\000\057\000\060" +
    "\000\061\000\071\000\072\000\100\000\001\002\000\044" +
    "\002\uffc4\004\uffc4\006\uffc4\010\uffc4\015\uffc4\022\uffc4\024" +
    "\uffc4\031\uffc4\035\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\071\uffc4\072\uffc4\100\uffc4\001\002\000\020\006" +
    "\074\010\076\015\075\053\uffdc\054\uffdc\101\uffdc\104\uffdc" +
    "\001\002\000\020\006\074\010\076\015\075\053\uffda\054" +
    "\uffda\101\uffda\104\uffda\001\002\000\026\004\044\006\005" +
    "\010\014\015\012\022\033\035\016\056\027\057\013\060" +
    "\031\100\017\001\002\000\004\104\200\001\002\000\042" +
    "\002\uffcc\004\uffcc\006\uffcc\010\uffcc\015\uffcc\022\uffcc\024" +
    "\uffcc\031\uffcc\035\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\071\uffcc\072\uffcc\100\uffcc\001\002\000\042\002\ufff4\004" +
    "\ufff4\006\ufff4\010\ufff4\015\ufff4\022\ufff4\024\ufff4\031\ufff4" +
    "\035\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\071\ufff4\072" +
    "\ufff4\100\ufff4\001\002\000\020\006\074\010\076\015\075" +
    "\053\uffdb\054\uffdb\101\uffdb\104\uffdb\001\002\000\012\025" +
    "\155\026\153\027\154\030\152\001\002\000\004\055\205" +
    "\001\002\000\004\004\206\001\002\000\004\104\207\001" +
    "\002\000\042\002\uffca\004\uffca\006\uffca\010\uffca\015\uffca" +
    "\022\uffca\024\uffca\031\uffca\035\uffca\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\071\uffca\072\uffca\100\uffca\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\036\004\027\005\031\006\034\007\036\010" +
    "\021\011\024\012\025\013\010\014\033\016\017\017\005" +
    "\020\006\021\035\022\022\001\001\000\002\001\001\000" +
    "\010\010\201\011\024\012\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\044\001\001\000\002\001" +
    "\001\000\010\010\174\011\024\012\025\001\001\000\002" +
    "\001\001\000\010\010\173\011\024\012\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\160\011\024" +
    "\012\025\021\161\022\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\053\006\055\010\021\011\024" +
    "\012\025\013\050\014\054\016\051\017\046\020\047\021" +
    "\035\022\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\037\001\001\000\002\001\001\000\016\010\021" +
    "\011\024\012\025\020\042\021\035\022\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\044\001\001\000\016\010\021\011\024\012\025\020" +
    "\045\021\035\022\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\060\005" +
    "\031\006\034\007\061\010\021\011\024\012\025\013\010" +
    "\014\033\016\017\017\005\020\006\021\035\022\022\001" +
    "\001\000\032\005\053\006\055\010\021\011\024\012\025" +
    "\013\050\014\054\016\051\017\046\020\047\021\035\022" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\101\001\001\000\004\011\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\071" +
    "\011\024\012\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\024\012\100\001\001\000\006\011\024" +
    "\012\077\001\001\000\006\011\024\012\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\060\005" +
    "\031\006\034\007\113\010\021\011\024\012\025\013\010" +
    "\014\033\016\017\017\005\020\006\021\035\022\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\060" +
    "\005\031\006\034\007\116\010\021\011\024\012\025\013" +
    "\010\014\033\016\017\017\005\020\006\021\035\022\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\060\005\031\006\034" +
    "\007\123\010\021\011\024\012\025\013\010\014\033\016" +
    "\017\017\005\020\006\021\035\022\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\060\005\031\006\034\007\130\010\021" +
    "\011\024\012\025\013\010\014\033\016\017\017\005\020" +
    "\006\021\035\022\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\060\005\031\006\034\007\135\010\021\011\024\012\025" +
    "\013\010\014\033\016\017\017\005\020\006\021\035\022" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\146\011\024\012\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\137" +
    "\001\001\000\004\024\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\021\011\024" +
    "\012\025\020\166\021\035\022\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\060\005\031\006\034" +
    "\007\171\010\021\011\024\012\025\013\010\014\033\016" +
    "\017\017\005\020\006\021\035\022\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\021\011\024\012\025\020\176\021\035" +
    "\022\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return lex.next_token();
    }


    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SI ::= BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SI",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // types ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // types ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // types ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // types ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("types",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOCK ::= SI exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOCK ::= SI varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOCK ::= SI mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOCK ::= SI funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOCK ::= SI varIns 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOCK ::= SI ifStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOCK ::= SI ifElseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOCK ::= exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOCK ::= mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOCK ::= funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOCK ::= varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOCK ::= varIns 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOCK ::= ifStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOCK ::= ifElseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compAritOp ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compAritOp ::= compAritOp MINPLS term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo MULTIPLESIMB"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compAritOp ::= compAritOp PLUS term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo SUMA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compAritOp ::= compAritOp MINUSW term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo RESTA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= term PRODUCT factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo PRODUCTO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= term DIVISION factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo COCIENTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= FLOATNUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= PARENTS compAritOp PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exprP ::= exprLog 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exprP ::= compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exprP ::= exprUni 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprLog ::= compAritOp opRel compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exprLog ::= PARENTS exprLog PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exprLog ::= MINUSW compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exprLog ::= PLUS compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exprLog ::= MINPLS compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exprUni ::= exprLog opLog exprP 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 1"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exprUni ::= IDENTIFIER opLog exprP 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exprUni ::= PARENTS exprUni PARENTC 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 3"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opRel ::= GRATHER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // opRel ::= GRATHERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // opRel ::= LOWER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opRel ::= LOWERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opRel ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // opRel ::= COMPARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // opLog ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opLog ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // varAsig ::= IDENTIFIER EQ exprP ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se asigno int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAsig",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // varIns ::= LOC SEP types SEP IDENTIFIER ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se creo variable local");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // varIns ::= GLOB SEP types SEP IDENTIFIER ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se creo variable global");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funcStruc ::= FUNC SEP INT SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funcStruc ::= FUNC SEP CHAR SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcStruc ::= FUNC SEP BOOL SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funcStruc ::= FUNC SEP FLOAT SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // mainStruc ::= FUNC SEP INT SEP MAIN DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion MAIN  ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainStruc",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ifStruc ::= IF PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura condicional IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStruc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ifElseStruc ::= ifStruc ELSE DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifElseStruc",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
