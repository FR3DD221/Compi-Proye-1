
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proye1_compi;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\004\003\000\002\042" +
    "\004\000\002\042\004\000\002\042\005\000\002\042\005" +
    "\000\002\042\003\000\002\042\004\000\002\042\003\000" +
    "\002\042\003\000\002\042\004\000\002\042\004\000\002" +
    "\042\003\000\002\042\004\000\002\042\004\000\002\042" +
    "\003\000\002\007\005\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\005\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\005\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\004\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\012\003\000" +
    "\002\012\005\000\002\012\005\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\005" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\005\000\002\031\005\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\003\000\002\031" +
    "\003\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\034\003\000\002\034\003\000\002\006\006\000\002\006" +
    "\005\000\002\005\007\000\002\005\007\000\002\005\007" +
    "\000\002\005\007\000\002\005\007\000\002\044\007\000" +
    "\002\044\007\000\002\044\007\000\002\044\007\000\002" +
    "\044\007\000\002\045\004\000\002\046\004\000\002\013" +
    "\012\000\002\013\012\000\002\013\012\000\002\013\012" +
    "\000\002\013\012\000\002\014\012\000\002\040\005\000" +
    "\002\040\003\000\002\041\006\000\002\016\011\000\002" +
    "\017\010\000\002\020\011\000\002\021\014\000\002\021" +
    "\014\000\002\043\014\000\002\043\014\000\002\022\010" +
    "\000\002\022\007\000\002\024\005\000\002\024\003\000" +
    "\002\023\004\000\002\047\004\000\002\035\006\000\002" +
    "\025\014\000\002\026\012\000\002\026\011\000\002\027" +
    "\016\000\002\027\014\000\002\027\020\000\002\036\007" +
    "\000\002\036\007\000\002\036\007\000\002\036\007\000" +
    "\002\036\007\000\002\037\004\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\010\003\014\034\006\076\013\001\002\000" +
    "\004\002\000\001\002\000\010\004\311\045\310\110\u013a" +
    "\001\002\000\004\060\215\001\002\000\012\002\ufff9\003" +
    "\014\034\006\076\013\001\002\000\012\002\ufff2\003\014" +
    "\034\006\076\013\001\002\000\012\002\ufffb\003\014\034" +
    "\006\076\013\001\002\000\012\002\ufff8\003\014\034\006" +
    "\076\013\001\002\000\004\060\155\001\002\000\012\002" +
    "\ufff5\003\014\034\006\076\013\001\002\000\004\002\153" +
    "\001\002\000\010\004\022\045\021\110\020\001\002\000" +
    "\012\002\uffa5\003\uffa5\034\uffa5\076\uffa5\001\002\000\012" +
    "\002\ufff6\003\014\034\006\076\013\001\002\000\030\004" +
    "\027\006\024\010\032\015\030\022\045\036\046\040\034" +
    "\061\042\062\031\063\043\104\035\001\002\000\004\045" +
    "\023\001\002\000\030\004\027\006\024\010\032\015\030" +
    "\022\045\036\046\040\034\061\042\062\031\063\043\104" +
    "\035\001\002\000\016\004\102\022\045\036\046\040\034" +
    "\061\042\104\100\001\002\000\046\006\uffca\010\uffca\013" +
    "\uffca\014\uffca\015\uffca\037\uffca\047\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\105" +
    "\uffca\107\uffca\110\uffca\001\002\000\004\110\146\001\002" +
    "\000\044\006\uffcc\010\uffcc\013\uffcc\014\uffcc\015\uffcc\047" +
    "\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\052" +
    "\057\053\104\103\105\uffcc\106\104\110\uffcc\001\002\000" +
    "\016\004\102\022\045\036\046\040\034\061\042\104\100" +
    "\001\002\000\012\056\uffbf\057\uffbf\105\uffbf\110\uffbf\001" +
    "\002\000\016\004\102\022\045\036\046\040\034\061\042" +
    "\104\100\001\002\000\046\006\uffcb\010\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\037\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\105\uffcb\107" +
    "\uffcb\110\uffcb\001\002\000\046\006\uffcd\010\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\037\uffcd\047\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\105\uffcd" +
    "\107\uffcd\110\uffcd\001\002\000\030\004\027\006\024\010" +
    "\032\015\030\022\045\036\046\040\034\061\042\062\031" +
    "\063\043\104\035\001\002\000\030\006\116\010\120\015" +
    "\117\047\133\051\127\052\130\053\126\054\132\055\131" +
    "\105\uffc6\110\uffc6\001\002\000\006\105\uffc5\110\uffc5\001" +
    "\002\000\046\006\uffd2\010\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\037\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\105\uffd2\107\uffd2\110\uffd2" +
    "\001\002\000\046\006\uffd6\010\uffd6\013\076\014\077\015" +
    "\uffd6\037\uffd6\047\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\055\uffd6\056\uffd6\057\uffd6\060\uffd6\105\uffd6\107\uffd6\110" +
    "\uffd6\001\002\000\046\006\uffce\010\uffce\013\uffce\014\uffce" +
    "\015\uffce\037\uffce\047\uffce\051\uffce\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\056\uffce\057\uffce\060\uffce\105\uffce\107\uffce" +
    "\110\uffce\001\002\000\012\056\uffbe\057\uffbe\105\uffbe\110" +
    "\uffbe\001\002\000\050\006\uff81\010\uff81\013\uff81\014\uff81" +
    "\015\uff81\036\046\037\uff81\047\uff81\051\uff81\052\uff81\053" +
    "\uff81\054\uff81\055\uff81\056\uff81\057\uff81\060\uff81\105\uff81" +
    "\107\uff81\110\uff81\001\002\000\046\006\uffcf\010\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\037\uffcf\047\uffcf\051\uffcf\052\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\105" +
    "\uffcf\107\uffcf\110\uffcf\001\002\000\004\060\055\001\002" +
    "\000\012\056\052\057\053\105\uffc7\110\uffc7\001\002\000" +
    "\046\006\uffc9\010\uffc9\013\uffc9\014\uffc9\015\uffc9\037\uffc9" +
    "\047\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\105\uffc9\107\uffc9\110\uffc9\001\002" +
    "\000\030\004\027\006\024\010\032\015\030\022\045\036" +
    "\046\040\034\061\042\062\031\063\043\104\035\001\002" +
    "\000\030\004\uffb4\006\uffb4\010\uffb4\015\uffb4\022\uffb4\036" +
    "\uffb4\040\uffb4\061\uffb4\062\uffb4\063\uffb4\104\uffb4\001\002" +
    "\000\030\004\uffb3\006\uffb3\010\uffb3\015\uffb3\022\uffb3\036" +
    "\uffb3\040\uffb3\061\uffb3\062\uffb3\063\uffb3\104\uffb3\001\002" +
    "\000\006\105\uffbd\110\uffbd\001\002\000\014\027\062\030" +
    "\061\031\060\032\057\033\056\001\002\000\004\060\073" +
    "\001\002\000\004\060\071\001\002\000\004\060\067\001" +
    "\002\000\004\060\065\001\002\000\004\060\063\001\002" +
    "\000\004\004\064\001\002\000\050\006\uff87\010\uff87\013" +
    "\uff87\014\uff87\015\uff87\036\uff87\037\uff87\047\uff87\051\uff87" +
    "\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060" +
    "\uff87\105\uff87\107\uff87\110\uff87\001\002\000\004\004\066" +
    "\001\002\000\050\006\uff86\010\uff86\013\uff86\014\uff86\015" +
    "\uff86\036\uff86\037\uff86\047\uff86\051\uff86\052\uff86\053\uff86" +
    "\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\105\uff86\107" +
    "\uff86\110\uff86\001\002\000\004\004\070\001\002\000\050" +
    "\006\uff84\010\uff84\013\uff84\014\uff84\015\uff84\036\uff84\037" +
    "\uff84\047\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84" +
    "\056\uff84\057\uff84\060\uff84\105\uff84\107\uff84\110\uff84\001" +
    "\002\000\004\004\072\001\002\000\050\006\uff83\010\uff83" +
    "\013\uff83\014\uff83\015\uff83\036\uff83\037\uff83\047\uff83\051" +
    "\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83" +
    "\060\uff83\105\uff83\107\uff83\110\uff83\001\002\000\004\004" +
    "\074\001\002\000\050\006\uff85\010\uff85\013\uff85\014\uff85" +
    "\015\uff85\036\uff85\037\uff85\047\uff85\051\uff85\052\uff85\053" +
    "\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\105\uff85" +
    "\107\uff85\110\uff85\001\002\000\046\006\uff82\010\uff82\013" +
    "\uff82\014\uff82\015\uff82\037\uff82\047\uff82\051\uff82\052\uff82" +
    "\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\105" +
    "\uff82\107\uff82\110\uff82\001\002\000\016\004\102\022\045" +
    "\036\046\040\034\061\042\104\100\001\002\000\016\004" +
    "\102\022\045\036\046\040\034\061\042\104\100\001\002" +
    "\000\016\004\102\022\045\036\046\040\034\061\042\104" +
    "\100\001\002\000\046\006\uffd0\010\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\037\uffd0\047\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\105\uffd0\107\uffd0" +
    "\110\uffd0\001\002\000\052\006\uffcc\010\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\037\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\104\103\105" +
    "\uffcc\106\104\107\uffcc\110\uffcc\001\002\000\004\004\110" +
    "\001\002\000\004\022\105\001\002\000\004\107\106\001" +
    "\002\000\046\006\uff8e\010\uff8e\013\uff8e\014\uff8e\015\uff8e" +
    "\037\uff8e\047\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055" +
    "\uff8e\056\uff8e\057\uff8e\060\uff8e\105\uff8e\107\uff8e\110\uff8e" +
    "\001\002\000\004\105\113\001\002\000\006\037\111\105" +
    "\uff9d\001\002\000\004\004\110\001\002\000\004\105\uff9e" +
    "\001\002\000\046\006\uff9c\010\uff9c\013\uff9c\014\uff9c\015" +
    "\uff9c\037\uff9c\047\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\056\uff9c\057\uff9c\060\uff9c\105\uff9c\107\uff9c\110" +
    "\uff9c\001\002\000\012\006\116\010\120\015\117\105\115" +
    "\001\002\000\046\006\uffc8\010\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\037\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\060\uffc8\105\uffc8\107\uffc8\110" +
    "\uffc8\001\002\000\016\004\102\022\045\036\046\040\034" +
    "\061\042\104\100\001\002\000\016\004\102\022\045\036" +
    "\046\040\034\061\042\104\100\001\002\000\016\004\102" +
    "\022\045\036\046\040\034\061\042\104\100\001\002\000" +
    "\046\006\uffd3\010\uffd3\013\076\014\077\015\uffd3\037\uffd3" +
    "\047\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\060\uffd3\105\uffd3\107\uffd3\110\uffd3\001\002" +
    "\000\046\006\uffd5\010\uffd5\013\076\014\077\015\uffd5\037" +
    "\uffd5\047\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\105\uffd5\107\uffd5\110\uffd5\001" +
    "\002\000\046\006\uffd4\010\uffd4\013\076\014\077\015\uffd4" +
    "\037\uffd4\047\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\060\uffd4\105\uffd4\107\uffd4\110\uffd4" +
    "\001\002\000\046\006\uffd1\010\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\037\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\105\uffd1\107\uffd1\110" +
    "\uffd1\001\002\000\016\004\102\022\045\036\046\040\034" +
    "\061\042\104\100\001\002\000\016\004\uffb8\022\uffb8\036" +
    "\uffb8\040\uffb8\061\uffb8\104\uffb8\001\002\000\016\004\uffba" +
    "\022\uffba\036\uffba\040\uffba\061\uffba\104\uffba\001\002\000" +
    "\016\004\uffb9\022\uffb9\036\uffb9\040\uffb9\061\uffb9\104\uffb9" +
    "\001\002\000\016\004\uffb5\022\uffb5\036\uffb5\040\uffb5\061" +
    "\uffb5\104\uffb5\001\002\000\016\004\uffb7\022\uffb7\036\uffb7" +
    "\040\uffb7\061\uffb7\104\uffb7\001\002\000\016\004\uffb6\022" +
    "\uffb6\036\uffb6\040\uffb6\061\uffb6\104\uffb6\001\002\000\020" +
    "\006\116\010\120\015\117\056\uffc4\057\uffc4\105\uffc4\110" +
    "\uffc4\001\002\000\026\006\116\010\120\015\117\047\133" +
    "\051\127\052\130\053\126\054\132\055\131\105\115\001" +
    "\002\000\004\105\141\001\002\000\010\056\052\057\053" +
    "\105\140\001\002\000\012\056\uffc3\057\uffc3\105\uffc3\110" +
    "\uffc3\001\002\000\006\105\uffbb\110\uffbb\001\002\000\020" +
    "\006\116\010\120\015\117\056\uffc2\057\uffc2\105\uffc2\110" +
    "\uffc2\001\002\000\020\006\116\010\120\015\117\056\uffc0" +
    "\057\uffc0\105\uffc0\110\uffc0\001\002\000\030\004\027\006" +
    "\024\010\032\015\030\022\045\036\046\040\034\061\042" +
    "\062\031\063\043\104\035\001\002\000\006\105\uffbc\110" +
    "\uffbc\001\002\000\060\002\uffb2\003\uffb2\004\uffb2\006\uffb2" +
    "\010\uffb2\015\uffb2\022\uffb2\024\uffb2\034\uffb2\036\uffb2\040" +
    "\uffb2\042\uffb2\045\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2" +
    "\066\uffb2\067\uffb2\072\uffb2\075\uffb2\076\uffb2\104\uffb2\001" +
    "\002\000\020\006\116\010\120\015\117\056\uffc1\057\uffc1" +
    "\105\uffc1\110\uffc1\001\002\000\004\110\151\001\002\000" +
    "\060\002\uffb1\003\uffb1\004\uffb1\006\uffb1\010\uffb1\015\uffb1" +
    "\022\uffb1\024\uffb1\034\uffb1\036\uffb1\040\uffb1\042\uffb1\045" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\066\uffb1\067\uffb1" +
    "\072\uffb1\075\uffb1\076\uffb1\104\uffb1\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\001\001\002\000\004\002\ufff4" +
    "\001\002\000\014\027\162\030\161\031\160\032\157\033" +
    "\156\001\002\000\004\060\207\001\002\000\004\060\205" +
    "\001\002\000\004\060\203\001\002\000\004\060\173\001" +
    "\002\000\004\060\163\001\002\000\006\004\164\074\165" +
    "\001\002\000\010\004\uffab\045\uffab\110\uffab\001\002\000" +
    "\004\060\166\001\002\000\004\004\167\001\002\000\004" +
    "\106\170\001\002\000\004\022\171\001\002\000\004\107" +
    "\172\001\002\000\010\004\uff96\045\uff96\110\uff96\001\002" +
    "\000\006\004\174\074\175\001\002\000\010\004\uffaa\045" +
    "\uffaa\110\uffaa\001\002\000\004\060\176\001\002\000\004" +
    "\004\177\001\002\000\004\106\200\001\002\000\004\022" +
    "\201\001\002\000\004\107\202\001\002\000\010\004\uff95" +
    "\045\uff95\110\uff95\001\002\000\004\004\204\001\002\000" +
    "\010\004\uffa9\045\uffa9\110\uffa9\001\002\000\004\004\206" +
    "\001\002\000\010\004\uffa7\045\uffa7\110\uffa7\001\002\000" +
    "\004\004\210\001\002\000\010\004\uffa8\045\uffa8\110\uffa8" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\ufffa\001" +
    "\002\000\004\002\ufff3\001\002\000\004\002\uffff\001\002" +
    "\000\014\027\222\030\220\031\221\032\217\033\216\001" +
    "\002\000\004\060\u0135\001\002\000\004\060\u0130\001\002" +
    "\000\004\060\u012b\001\002\000\004\060\u0126\001\002\000" +
    "\004\060\223\001\002\000\006\004\225\035\224\001\002" +
    "\000\004\024\u0123\001\002\000\004\024\226\001\002\000" +
    "\050\003\241\004\253\006\024\010\032\015\030\022\045" +
    "\034\006\036\046\040\034\045\021\061\042\062\031\063" +
    "\043\064\237\066\251\067\233\072\246\075\247\104\035" +
    "\001\002\000\052\004\uffd8\006\uffd8\010\uffd8\015\uffd8\022" +
    "\uffd8\024\uffd8\034\uffd8\036\uffd8\040\uffd8\042\uffd8\045\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\064\uffd8\066\uffd8\067\uffd8\072" +
    "\uffd8\075\uffd8\104\uffd8\001\002\000\052\004\uffda\006\uffda" +
    "\010\uffda\015\uffda\022\uffda\024\uffda\034\uffda\036\uffda\040" +
    "\uffda\042\uffda\045\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\066\uffda\067\uffda\072\uffda\075\uffda\104\uffda\001\002\000" +
    "\052\004\uffdf\006\uffdf\010\uffdf\015\uffdf\022\uffdf\024\uffdf" +
    "\034\uffdf\036\uffdf\040\uffdf\042\uffdf\045\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\066\uffdf\067\uffdf\072\uffdf\075\uffdf" +
    "\104\uffdf\001\002\000\052\004\uffde\006\uffde\010\uffde\015" +
    "\uffde\022\uffde\024\uffde\034\uffde\036\uffde\040\uffde\042\uffde" +
    "\045\uffde\061\uffde\062\uffde\063\uffde\064\uffde\066\uffde\067" +
    "\uffde\072\uffde\075\uffde\104\uffde\001\002\000\004\004\u010e" +
    "\001\002\000\010\004\311\045\310\110\u010d\001\002\000" +
    "\050\004\253\006\024\010\032\015\030\022\045\024\u010c" +
    "\034\006\036\046\040\034\045\021\061\042\062\031\063" +
    "\043\064\237\066\251\067\233\072\246\075\247\104\035" +
    "\001\002\000\054\004\uffdc\006\uffdc\010\uffdc\015\uffdc\022" +
    "\uffdc\024\uffdc\034\uffdc\036\uffdc\040\uffdc\042\uffdc\045\uffdc" +
    "\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\302\066\uffdc\067" +
    "\uffdc\072\uffdc\075\uffdc\104\uffdc\001\002\000\004\104\u0106" +
    "\001\002\000\052\004\uffe0\006\uffe0\010\uffe0\015\uffe0\022" +
    "\uffe0\024\uffe0\034\uffe0\036\uffe0\040\uffe0\042\uffe0\045\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\067\uffe0\072" +
    "\uffe0\075\uffe0\104\uffe0\001\002\000\052\004\uffd7\006\uffd7" +
    "\010\uffd7\015\uffd7\022\uffd7\024\uffd7\034\uffd7\036\uffd7\040" +
    "\uffd7\042\uffd7\045\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7" +
    "\066\uffd7\067\uffd7\072\uffd7\075\uffd7\104\uffd7\001\002\000" +
    "\052\004\uffe1\006\uffe1\010\uffe1\015\uffe1\022\uffe1\024\uffe1" +
    "\034\uffe1\036\uffe1\040\uffe1\042\uffe1\045\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\066\uffe1\067\uffe1\072\uffe1\075\uffe1" +
    "\104\uffe1\001\002\000\010\004\022\045\021\110\u0105\001" +
    "\002\000\052\004\uffd9\006\uffd9\010\uffd9\015\uffd9\022\uffd9" +
    "\024\uffd9\034\uffd9\036\uffd9\040\uffd9\042\uffd9\045\uffd9\061" +
    "\uffd9\062\uffd9\063\uffd9\064\uffd9\066\uffd9\067\uffd9\072\uffd9" +
    "\075\uffd9\104\uffd9\001\002\000\004\110\u0104\001\002\000" +
    "\004\104\363\001\002\000\004\060\327\001\002\000\052" +
    "\004\uffe2\006\uffe2\010\uffe2\015\uffe2\022\uffe2\024\uffe2\034" +
    "\uffe2\036\uffe2\040\uffe2\042\uffe2\045\uffe2\061\uffe2\062\uffe2" +
    "\063\uffe2\064\uffe2\066\uffe2\067\uffe2\072\uffe2\075\uffe2\104" +
    "\uffe2\001\002\000\004\104\254\001\002\000\052\004\uffdb" +
    "\006\uffdb\010\uffdb\015\uffdb\022\uffdb\024\uffdb\034\uffdb\036" +
    "\uffdb\040\uffdb\042\uffdb\045\uffdb\061\uffdb\062\uffdb\063\uffdb" +
    "\064\uffdb\066\uffdb\067\uffdb\072\uffdb\075\uffdb\104\uffdb\001" +
    "\002\000\044\006\uffcc\010\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\045\023\047\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\052\057\053\104\103\106\104\110\uffcc\001\002" +
    "\000\030\004\027\006\024\010\032\015\030\022\045\036" +
    "\046\040\034\061\042\062\031\063\043\104\035\001\002" +
    "\000\004\105\256\001\002\000\004\024\257\001\002\000" +
    "\050\003\241\004\253\006\024\010\032\015\030\022\045" +
    "\034\006\036\046\040\034\045\021\061\042\062\031\063" +
    "\043\064\237\066\251\067\233\072\246\075\247\104\035" +
    "\001\002\000\050\004\253\006\024\010\032\015\030\022" +
    "\045\024\271\034\006\036\046\040\034\045\021\061\042" +
    "\062\031\063\043\064\237\066\251\067\233\072\246\075" +
    "\247\104\035\001\002\000\052\004\uffea\006\uffea\010\uffea" +
    "\015\uffea\022\uffea\024\uffea\034\uffea\036\uffea\040\uffea\042" +
    "\uffea\045\uffea\061\uffea\062\uffea\063\uffea\064\uffea\066\uffea" +
    "\067\uffea\072\uffea\075\uffea\104\uffea\001\002\000\052\004" +
    "\uffe9\006\uffe9\010\uffe9\015\uffe9\022\uffe9\024\uffe9\034\uffe9" +
    "\036\uffe9\040\uffe9\042\uffe9\045\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\064\uffe9\066\uffe9\067\uffe9\072\uffe9\075\uffe9\104\uffe9" +
    "\001\002\000\052\004\ufff0\006\ufff0\010\ufff0\015\ufff0\022" +
    "\ufff0\024\ufff0\034\ufff0\036\ufff0\040\ufff0\042\ufff0\045\ufff0" +
    "\061\ufff0\062\ufff0\063\ufff0\064\ufff0\066\ufff0\067\ufff0\072" +
    "\ufff0\075\ufff0\104\ufff0\001\002\000\052\004\uffe6\006\uffe6" +
    "\010\uffe6\015\uffe6\022\uffe6\024\uffe6\034\uffe6\036\uffe6\040" +
    "\uffe6\042\uffe6\045\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6" +
    "\066\uffe6\067\uffe6\072\uffe6\075\uffe6\104\uffe6\001\002\000" +
    "\010\004\311\045\310\110\307\001\002\000\054\004\uffec" +
    "\006\uffec\010\uffec\015\uffec\022\uffec\024\uffec\034\uffec\036" +
    "\uffec\040\uffec\042\uffec\045\uffec\061\uffec\062\uffec\063\uffec" +
    "\064\uffec\065\302\066\uffec\067\uffec\072\uffec\075\uffec\104" +
    "\uffec\001\002\000\052\004\uffee\006\uffee\010\uffee\015\uffee" +
    "\022\uffee\024\uffee\034\uffee\036\uffee\040\uffee\042\uffee\045" +
    "\uffee\061\uffee\062\uffee\063\uffee\064\uffee\066\uffee\067\uffee" +
    "\072\uffee\075\uffee\104\uffee\001\002\000\052\004\uffef\006" +
    "\uffef\010\uffef\015\uffef\022\uffef\024\uffef\034\uffef\036\uffef" +
    "\040\uffef\042\uffef\045\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\066\uffef\067\uffef\072\uffef\075\uffef\104\uffef\001\002" +
    "\000\052\004\uff99\006\uff99\010\uff99\015\uff99\022\uff99\024" +
    "\uff99\034\uff99\036\uff99\040\uff99\042\uff99\045\uff99\061\uff99" +
    "\062\uff99\063\uff99\064\uff99\066\uff99\067\uff99\072\uff99\075" +
    "\uff99\104\uff99\001\002\000\010\004\022\045\021\110\301" +
    "\001\002\000\052\004\uffe8\006\uffe8\010\uffe8\015\uffe8\022" +
    "\uffe8\024\uffe8\034\uffe8\036\uffe8\040\uffe8\042\uffe8\045\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\064\uffe8\066\uffe8\067\uffe8\072" +
    "\uffe8\075\uffe8\104\uffe8\001\002\000\004\110\277\001\002" +
    "\000\052\004\uffe5\006\uffe5\010\uffe5\015\uffe5\022\uffe5\024" +
    "\uffe5\034\uffe5\036\uffe5\040\uffe5\042\uffe5\045\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\064\uffe5\066\uffe5\067\uffe5\072\uffe5\075" +
    "\uffe5\104\uffe5\001\002\000\052\004\uffeb\006\uffeb\010\uffeb" +
    "\015\uffeb\022\uffeb\024\uffeb\034\uffeb\036\uffeb\040\uffeb\042" +
    "\uffeb\045\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\066\uffeb" +
    "\067\uffeb\072\uffeb\075\uffeb\104\uffeb\001\002\000\052\004" +
    "\ufff1\006\ufff1\010\ufff1\015\ufff1\022\ufff1\024\ufff1\034\ufff1" +
    "\036\ufff1\040\ufff1\042\ufff1\045\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\066\ufff1\067\ufff1\072\ufff1\075\ufff1\104\ufff1" +
    "\001\002\000\052\004\uffa6\006\uffa6\010\uffa6\015\uffa6\022" +
    "\uffa6\024\uffa6\034\uffa6\036\uffa6\040\uffa6\042\uffa6\045\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\064\uffa6\066\uffa6\067\uffa6\072" +
    "\uffa6\075\uffa6\104\uffa6\001\002\000\052\004\uffed\006\uffed" +
    "\010\uffed\015\uffed\022\uffed\024\uffed\034\uffed\036\uffed\040" +
    "\uffed\042\uffed\045\uffed\061\uffed\062\uffed\063\uffed\064\uffed" +
    "\066\uffed\067\uffed\072\uffed\075\uffed\104\uffed\001\002\000" +
    "\004\060\303\001\002\000\004\024\304\001\002\000\050" +
    "\003\241\004\253\006\024\010\032\015\030\022\045\034" +
    "\006\036\046\040\034\045\021\061\042\062\031\063\043" +
    "\064\237\066\251\067\233\072\246\075\247\104\035\001" +
    "\002\000\050\004\253\006\024\010\032\015\030\022\045" +
    "\024\306\034\006\036\046\040\034\045\021\061\042\062" +
    "\031\063\043\064\237\066\251\067\233\072\246\075\247" +
    "\104\035\001\002\000\052\004\uff9a\006\uff9a\010\uff9a\015" +
    "\uff9a\022\uff9a\024\uff9a\034\uff9a\036\uff9a\040\uff9a\042\uff9a" +
    "\045\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\066\uff9a\067" +
    "\uff9a\072\uff9a\075\uff9a\104\uff9a\001\002\000\052\004\uffe7" +
    "\006\uffe7\010\uffe7\015\uffe7\022\uffe7\024\uffe7\034\uffe7\036" +
    "\uffe7\040\uffe7\042\uffe7\045\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\064\uffe7\066\uffe7\067\uffe7\072\uffe7\075\uffe7\104\uffe7\001" +
    "\002\000\004\106\323\001\002\000\004\045\313\001\002" +
    "\000\052\004\uff90\006\uff90\010\uff90\015\uff90\022\uff90\024" +
    "\uff90\034\uff90\036\uff90\040\uff90\042\uff90\045\uff90\061\uff90" +
    "\062\uff90\063\uff90\064\uff90\066\uff90\067\uff90\072\uff90\075" +
    "\uff90\104\uff90\001\002\000\004\106\314\001\002\000\016" +
    "\004\102\022\045\036\046\040\034\061\042\104\100\001" +
    "\002\000\014\006\116\010\120\015\117\037\321\107\uff91" +
    "\001\002\000\004\107\317\001\002\000\004\110\320\001" +
    "\002\000\060\002\uff94\003\uff94\004\uff94\006\uff94\010\uff94" +
    "\015\uff94\022\uff94\024\uff94\034\uff94\036\uff94\040\uff94\042" +
    "\uff94\045\uff94\061\uff94\062\uff94\063\uff94\064\uff94\066\uff94" +
    "\067\uff94\072\uff94\075\uff94\076\uff94\104\uff94\001\002\000" +
    "\016\004\102\022\045\036\046\040\034\061\042\104\100" +
    "\001\002\000\004\107\uff92\001\002\000\016\004\102\022" +
    "\045\036\046\040\034\061\042\104\100\001\002\000\004" +
    "\107\325\001\002\000\004\110\326\001\002\000\060\002" +
    "\uff93\003\uff93\004\uff93\006\uff93\010\uff93\015\uff93\022\uff93" +
    "\024\uff93\034\uff93\036\uff93\040\uff93\042\uff93\045\uff93\061" +
    "\uff93\062\uff93\063\uff93\064\uff93\066\uff93\067\uff93\072\uff93" +
    "\075\uff93\076\uff93\104\uff93\001\002\000\014\027\334\030" +
    "\333\031\332\032\331\033\330\001\002\000\004\060\361" +
    "\001\002\000\004\060\357\001\002\000\004\060\355\001" +
    "\002\000\004\060\345\001\002\000\004\060\335\001\002" +
    "\000\006\004\336\074\337\001\002\000\010\004\uffb0\045" +
    "\uffb0\110\uffb0\001\002\000\004\060\340\001\002\000\004" +
    "\004\341\001\002\000\004\106\342\001\002\000\004\022" +
    "\343\001\002\000\004\107\344\001\002\000\010\004\uff98" +
    "\045\uff98\110\uff98\001\002\000\006\004\346\074\347\001" +
    "\002\000\010\004\uffaf\045\uffaf\110\uffaf\001\002\000\004" +
    "\060\350\001\002\000\004\004\351\001\002\000\004\106" +
    "\352\001\002\000\004\022\353\001\002\000\004\107\354" +
    "\001\002\000\010\004\uff97\045\uff97\110\uff97\001\002\000" +
    "\004\004\356\001\002\000\010\004\uffae\045\uffae\110\uffae" +
    "\001\002\000\004\004\360\001\002\000\010\004\uffad\045" +
    "\uffad\110\uffad\001\002\000\004\004\362\001\002\000\010" +
    "\004\uffac\045\uffac\110\uffac\001\002\000\004\004\364\001" +
    "\002\000\004\105\365\001\002\000\004\024\366\001\002" +
    "\000\004\073\370\001\002\000\004\100\u0100\001\002\000" +
    "\004\060\371\001\002\000\016\004\102\022\045\036\046" +
    "\040\034\061\042\104\100\001\002\000\012\006\116\010" +
    "\120\015\117\060\373\001\002\000\050\003\241\004\253" +
    "\006\024\010\032\015\030\022\045\034\006\036\046\040" +
    "\034\045\021\061\042\062\031\063\043\064\237\066\251" +
    "\067\233\072\246\075\247\104\035\001\002\000\050\004" +
    "\253\006\024\010\032\015\030\022\045\034\006\036\046" +
    "\040\034\042\375\045\021\061\042\062\031\063\043\064" +
    "\237\066\251\067\233\072\246\075\247\104\035\001\002" +
    "\000\004\110\376\001\002\000\006\073\370\100\uff8b\001" +
    "\002\000\004\100\uff8c\001\002\000\004\060\u0101\001\002" +
    "\000\050\003\241\004\253\006\024\010\032\015\030\022" +
    "\045\034\006\036\046\040\034\045\021\061\042\062\031" +
    "\063\043\064\237\066\251\067\233\072\246\075\247\104" +
    "\035\001\002\000\050\004\253\006\024\010\032\015\030" +
    "\022\045\024\u0103\034\006\036\046\040\034\045\021\061" +
    "\042\062\031\063\043\064\237\066\251\067\233\072\246" +
    "\075\247\104\035\001\002\000\052\004\uff8d\006\uff8d\010" +
    "\uff8d\015\uff8d\022\uff8d\024\uff8d\034\uff8d\036\uff8d\040\uff8d" +
    "\042\uff8d\045\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\066" +
    "\uff8d\067\uff8d\072\uff8d\075\uff8d\104\uff8d\001\002\000\052" +
    "\004\uffe4\006\uffe4\010\uffe4\015\uffe4\022\uffe4\024\uffe4\034" +
    "\uffe4\036\uffe4\040\uffe4\042\uffe4\045\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\064\uffe4\066\uffe4\067\uffe4\072\uffe4\075\uffe4\104" +
    "\uffe4\001\002\000\052\004\uffdd\006\uffdd\010\uffdd\015\uffdd" +
    "\022\uffdd\024\uffdd\034\uffdd\036\uffdd\040\uffdd\042\uffdd\045" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\066\uffdd\067\uffdd" +
    "\072\uffdd\075\uffdd\104\uffdd\001\002\000\030\004\027\006" +
    "\024\010\032\015\030\022\045\036\046\040\034\061\042" +
    "\062\031\063\043\104\035\001\002\000\004\105\u0108\001" +
    "\002\000\004\024\u0109\001\002\000\050\003\241\004\253" +
    "\006\024\010\032\015\030\022\045\034\006\036\046\040" +
    "\034\045\021\061\042\062\031\063\043\064\237\066\251" +
    "\067\233\072\246\075\247\104\035\001\002\000\050\004" +
    "\253\006\024\010\032\015\030\022\045\024\u010b\034\006" +
    "\036\046\040\034\045\021\061\042\062\031\063\043\064" +
    "\237\066\251\067\233\072\246\075\247\104\035\001\002" +
    "\000\054\004\uff9b\006\uff9b\010\uff9b\015\uff9b\022\uff9b\024" +
    "\uff9b\034\uff9b\036\uff9b\040\uff9b\042\uff9b\045\uff9b\061\uff9b" +
    "\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\072" +
    "\uff9b\075\uff9b\104\uff9b\001\002\000\060\002\uffa4\003\uffa4" +
    "\004\uffa4\006\uffa4\010\uffa4\015\uffa4\022\uffa4\024\uffa4\034" +
    "\uffa4\036\uffa4\040\uffa4\042\uffa4\045\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\066\uffa4\067\uffa4\072\uffa4\075\uffa4\076" +
    "\uffa4\104\uffa4\001\002\000\052\004\uffe3\006\uffe3\010\uffe3" +
    "\015\uffe3\022\uffe3\024\uffe3\034\uffe3\036\uffe3\040\uffe3\042" +
    "\uffe3\045\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\066\uffe3" +
    "\067\uffe3\072\uffe3\075\uffe3\104\uffe3\001\002\000\004\070" +
    "\u010f\001\002\000\004\071\u0110\001\002\000\004\104\u0111" +
    "\001\002\000\004\022\u0112\001\002\000\006\037\u0113\105" +
    "\u0114\001\002\000\004\022\u0118\001\002\000\004\024\u0115" +
    "\001\002\000\050\003\241\004\253\006\024\010\032\015" +
    "\030\022\045\034\006\036\046\040\034\045\021\061\042" +
    "\062\031\063\043\064\237\066\251\067\233\072\246\075" +
    "\247\104\035\001\002\000\050\004\253\006\024\010\032" +
    "\015\030\022\045\024\u0117\034\006\036\046\040\034\045" +
    "\021\061\042\062\031\063\043\064\237\066\251\067\233" +
    "\072\246\075\247\104\035\001\002\000\052\004\uff89\006" +
    "\uff89\010\uff89\015\uff89\022\uff89\024\uff89\034\uff89\036\uff89" +
    "\040\uff89\042\uff89\045\uff89\061\uff89\062\uff89\063\uff89\064" +
    "\uff89\066\uff89\067\uff89\072\uff89\075\uff89\104\uff89\001\002" +
    "\000\006\037\u0119\105\u011a\001\002\000\004\022\u011e\001" +
    "\002\000\004\024\u011b\001\002\000\050\003\241\004\253" +
    "\006\024\010\032\015\030\022\045\034\006\036\046\040" +
    "\034\045\021\061\042\062\031\063\043\064\237\066\251" +
    "\067\233\072\246\075\247\104\035\001\002\000\050\004" +
    "\253\006\024\010\032\015\030\022\045\024\u011d\034\006" +
    "\036\046\040\034\045\021\061\042\062\031\063\043\064" +
    "\237\066\251\067\233\072\246\075\247\104\035\001\002" +
    "\000\052\004\uff8a\006\uff8a\010\uff8a\015\uff8a\022\uff8a\024" +
    "\uff8a\034\uff8a\036\uff8a\040\uff8a\042\uff8a\045\uff8a\061\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\066\uff8a\067\uff8a\072\uff8a\075" +
    "\uff8a\104\uff8a\001\002\000\004\105\u011f\001\002\000\004" +
    "\024\u0120\001\002\000\050\003\241\004\253\006\024\010" +
    "\032\015\030\022\045\034\006\036\046\040\034\045\021" +
    "\061\042\062\031\063\043\064\237\066\251\067\233\072" +
    "\246\075\247\104\035\001\002\000\050\004\253\006\024" +
    "\010\032\015\030\022\045\024\u0122\034\006\036\046\040" +
    "\034\045\021\061\042\062\031\063\043\064\237\066\251" +
    "\067\233\072\246\075\247\104\035\001\002\000\052\004" +
    "\uff88\006\uff88\010\uff88\015\uff88\022\uff88\024\uff88\034\uff88" +
    "\036\uff88\040\uff88\042\uff88\045\uff88\061\uff88\062\uff88\063" +
    "\uff88\064\uff88\066\uff88\067\uff88\072\uff88\075\uff88\104\uff88" +
    "\001\002\000\050\003\241\004\253\006\024\010\032\015" +
    "\030\022\045\034\006\036\046\040\034\045\021\061\042" +
    "\062\031\063\043\064\237\066\251\067\233\072\246\075" +
    "\247\104\035\001\002\000\050\004\253\006\024\010\032" +
    "\015\030\022\045\024\u0125\034\006\036\046\040\034\045" +
    "\021\061\042\062\031\063\043\064\237\066\251\067\233" +
    "\072\246\075\247\104\035\001\002\000\060\002\uff9f\003" +
    "\uff9f\004\uff9f\006\uff9f\010\uff9f\015\uff9f\022\uff9f\024\uff9f" +
    "\034\uff9f\036\uff9f\040\uff9f\042\uff9f\045\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\064\uff9f\066\uff9f\067\uff9f\072\uff9f\075\uff9f" +
    "\076\uff9f\104\uff9f\001\002\000\004\004\u0127\001\002\000" +
    "\004\024\u0128\001\002\000\050\003\241\004\253\006\024" +
    "\010\032\015\030\022\045\034\006\036\046\040\034\045" +
    "\021\061\042\062\031\063\043\064\237\066\251\067\233" +
    "\072\246\075\247\104\035\001\002\000\050\004\253\006" +
    "\024\010\032\015\030\022\045\024\u012a\034\006\036\046" +
    "\040\034\045\021\061\042\062\031\063\043\064\237\066" +
    "\251\067\233\072\246\075\247\104\035\001\002\000\060" +
    "\002\uffa0\003\uffa0\004\uffa0\006\uffa0\010\uffa0\015\uffa0\022" +
    "\uffa0\024\uffa0\034\uffa0\036\uffa0\040\uffa0\042\uffa0\045\uffa0" +
    "\061\uffa0\062\uffa0\063\uffa0\064\uffa0\066\uffa0\067\uffa0\072" +
    "\uffa0\075\uffa0\076\uffa0\104\uffa0\001\002\000\004\004\u012c" +
    "\001\002\000\004\024\u012d\001\002\000\050\003\241\004" +
    "\253\006\024\010\032\015\030\022\045\034\006\036\046" +
    "\040\034\045\021\061\042\062\031\063\043\064\237\066" +
    "\251\067\233\072\246\075\247\104\035\001\002\000\050" +
    "\004\253\006\024\010\032\015\030\022\045\024\u012f\034" +
    "\006\036\046\040\034\045\021\061\042\062\031\063\043" +
    "\064\237\066\251\067\233\072\246\075\247\104\035\001" +
    "\002\000\060\002\uffa3\003\uffa3\004\uffa3\006\uffa3\010\uffa3" +
    "\015\uffa3\022\uffa3\024\uffa3\034\uffa3\036\uffa3\040\uffa3\042" +
    "\uffa3\045\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\066\uffa3" +
    "\067\uffa3\072\uffa3\075\uffa3\076\uffa3\104\uffa3\001\002\000" +
    "\004\004\u0131\001\002\000\004\024\u0132\001\002\000\050" +
    "\003\241\004\253\006\024\010\032\015\030\022\045\034" +
    "\006\036\046\040\034\045\021\061\042\062\031\063\043" +
    "\064\237\066\251\067\233\072\246\075\247\104\035\001" +
    "\002\000\050\004\253\006\024\010\032\015\030\022\045" +
    "\024\u0134\034\006\036\046\040\034\045\021\061\042\062" +
    "\031\063\043\064\237\066\251\067\233\072\246\075\247" +
    "\104\035\001\002\000\060\002\uffa2\003\uffa2\004\uffa2\006" +
    "\uffa2\010\uffa2\015\uffa2\022\uffa2\024\uffa2\034\uffa2\036\uffa2" +
    "\040\uffa2\042\uffa2\045\uffa2\061\uffa2\062\uffa2\063\uffa2\064" +
    "\uffa2\066\uffa2\067\uffa2\072\uffa2\075\uffa2\076\uffa2\104\uffa2" +
    "\001\002\000\004\004\u0136\001\002\000\004\024\u0137\001" +
    "\002\000\050\003\241\004\253\006\024\010\032\015\030" +
    "\022\045\034\006\036\046\040\034\045\021\061\042\062" +
    "\031\063\043\064\237\066\251\067\233\072\246\075\247" +
    "\104\035\001\002\000\050\004\253\006\024\010\032\015" +
    "\030\022\045\024\u0139\034\006\036\046\040\034\045\021" +
    "\061\042\062\031\063\043\064\237\066\251\067\233\072" +
    "\246\075\247\104\035\001\002\000\060\002\uffa1\003\uffa1" +
    "\004\uffa1\006\uffa1\010\uffa1\015\uffa1\022\uffa1\024\uffa1\034" +
    "\uffa1\036\uffa1\040\uffa1\042\uffa1\045\uffa1\061\uffa1\062\uffa1" +
    "\063\uffa1\064\uffa1\066\uffa1\067\uffa1\072\uffa1\075\uffa1\076" +
    "\uffa1\104\uffa1\001\002\000\012\002\ufff7\003\014\034\006" +
    "\076\013\001\002\000\012\002\uff8f\003\uff8f\034\uff8f\076" +
    "\uff8f\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013a\000\022\004\014\013\006\014\011\042\003\043" +
    "\004\044\015\046\010\047\007\001\001\000\002\001\001" +
    "\000\004\022\u013a\001\001\000\002\001\001\000\020\013" +
    "\006\014\011\042\213\043\004\044\015\046\010\047\007" +
    "\001\001\000\020\013\006\014\011\042\212\043\004\044" +
    "\015\046\010\047\007\001\001\000\020\013\006\014\011" +
    "\042\211\043\004\044\015\046\010\047\007\001\001\000" +
    "\020\013\006\014\011\042\210\043\004\044\015\046\010" +
    "\047\007\001\001\000\002\001\001\000\020\013\006\014" +
    "\011\042\153\043\004\044\015\046\010\047\007\001\001" +
    "\000\002\001\001\000\004\006\016\001\001\000\002\001" +
    "\001\000\020\013\006\014\011\042\151\043\004\044\015" +
    "\046\010\047\007\001\001\000\026\010\035\011\037\012" +
    "\040\030\147\031\046\032\036\035\032\036\043\037\024" +
    "\041\047\001\001\000\002\001\001\000\026\010\035\011" +
    "\037\012\040\030\025\031\046\032\036\035\032\036\043" +
    "\037\024\041\047\001\001\000\020\010\146\011\037\012" +
    "\040\035\032\036\043\037\024\041\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\143\001\001\000" +
    "\020\010\142\011\037\012\040\035\032\036\043\037\024" +
    "\041\047\001\001\000\002\001\001\000\020\010\141\011" +
    "\037\012\040\035\032\036\043\037\024\041\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\134\011" +
    "\037\012\040\031\136\032\135\035\032\036\043\037\024" +
    "\041\047\001\001\000\004\033\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\043\037\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\050\001\001" +
    "\000\002\001\001\000\026\010\035\011\037\012\040\030" +
    "\053\031\046\032\036\035\032\036\043\037\024\041\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\123\035\032\036\043\037" +
    "\024\041\047\001\001\000\014\011\100\035\032\036\043" +
    "\037\024\041\047\001\001\000\020\010\113\011\037\012" +
    "\040\035\032\036\043\037\024\041\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\037\012\122\035\032\036\043\037" +
    "\024\041\047\001\001\000\016\011\037\012\121\035\032" +
    "\036\043\037\024\041\047\001\001\000\016\011\037\012" +
    "\120\035\032\036\043\037\024\041\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\133\011\037\012\040\035\032\036\043" +
    "\037\024\041\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\124\001" +
    "\001\000\002\001\001\000\004\034\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\010\035\011\037\012\040\030\144\031\046" +
    "\032\036\035\032\036\043\037\024\041\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\005\242\006\230\007\234\010\035\011\037\012" +
    "\040\013\237\014\241\016\235\017\251\020\226\021\233" +
    "\023\247\025\227\027\243\030\244\031\046\032\036\035" +
    "\032\036\043\037\024\041\047\045\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\311\001\001\000\056" +
    "\005\271\006\262\010\035\011\037\012\040\013\266\014" +
    "\267\016\265\017\275\020\260\021\264\023\274\025\261" +
    "\027\272\030\273\031\046\032\036\035\032\036\043\037" +
    "\024\041\047\045\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\143" +
    "\001\001\000\026\010\035\011\037\012\040\030\254\031" +
    "\046\032\036\035\032\036\043\037\024\041\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\005\242\006" +
    "\230\007\257\010\035\011\037\012\040\013\237\014\241" +
    "\016\235\017\251\020\226\021\233\023\247\025\227\027" +
    "\243\030\244\031\046\032\036\035\032\036\043\037\024" +
    "\041\047\045\231\001\001\000\056\005\271\006\262\010" +
    "\035\011\037\012\040\013\266\014\267\016\265\017\275" +
    "\020\260\021\264\023\274\025\261\027\272\030\273\031" +
    "\046\032\036\035\032\036\043\037\024\041\047\045\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\005\242\006\230\007\304\010" +
    "\035\011\037\012\040\013\237\014\241\016\235\017\251" +
    "\020\226\021\233\023\247\025\227\027\243\030\244\031" +
    "\046\032\036\035\032\036\043\037\024\041\047\045\231" +
    "\001\001\000\056\005\271\006\262\010\035\011\037\012" +
    "\040\013\266\014\267\016\265\017\275\020\260\021\264" +
    "\023\274\025\261\027\272\030\273\031\046\032\036\035" +
    "\032\036\043\037\024\041\047\045\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\314" +
    "\011\037\012\040\024\315\035\032\036\043\037\024\041" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\010\314\011\037\012" +
    "\040\024\321\035\032\036\043\037\024\041\047\001\001" +
    "\000\002\001\001\000\022\010\314\011\037\012\040\024" +
    "\323\035\032\036\043\037\024\041\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\371\011\037\012\040" +
    "\035\032\036\043\037\024\041\047\001\001\000\002\001" +
    "\001\000\060\005\242\006\230\007\373\010\035\011\037" +
    "\012\040\013\237\014\241\016\235\017\251\020\226\021" +
    "\233\023\247\025\227\027\243\030\244\031\046\032\036" +
    "\035\032\036\043\037\024\041\047\045\231\001\001\000" +
    "\056\005\271\006\262\010\035\011\037\012\040\013\266" +
    "\014\267\016\265\017\275\020\260\021\264\023\274\025" +
    "\261\027\272\030\273\031\046\032\036\035\032\036\043" +
    "\037\024\041\047\045\263\001\001\000\002\001\001\000" +
    "\004\026\376\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\005\242\006\230\007\u0101\010\035\011\037\012" +
    "\040\013\237\014\241\016\235\017\251\020\226\021\233" +
    "\023\247\025\227\027\243\030\244\031\046\032\036\035" +
    "\032\036\043\037\024\041\047\045\231\001\001\000\056" +
    "\005\271\006\262\010\035\011\037\012\040\013\266\014" +
    "\267\016\265\017\275\020\260\021\264\023\274\025\261" +
    "\027\272\030\273\031\046\032\036\035\032\036\043\037" +
    "\024\041\047\045\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\035\011\037\012" +
    "\040\030\u0106\031\046\032\036\035\032\036\043\037\024" +
    "\041\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\005\242\006\230\007\u0109\010\035\011\037\012\040" +
    "\013\237\014\241\016\235\017\251\020\226\021\233\023" +
    "\247\025\227\027\243\030\244\031\046\032\036\035\032" +
    "\036\043\037\024\041\047\045\231\001\001\000\056\005" +
    "\271\006\262\010\035\011\037\012\040\013\266\014\267" +
    "\016\265\017\275\020\260\021\264\023\274\025\261\027" +
    "\272\030\273\031\046\032\036\035\032\036\043\037\024" +
    "\041\047\045\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\005\242\006\230" +
    "\007\u0115\010\035\011\037\012\040\013\237\014\241\016" +
    "\235\017\251\020\226\021\233\023\247\025\227\027\243" +
    "\030\244\031\046\032\036\035\032\036\043\037\024\041" +
    "\047\045\231\001\001\000\056\005\271\006\262\010\035" +
    "\011\037\012\040\013\266\014\267\016\265\017\275\020" +
    "\260\021\264\023\274\025\261\027\272\030\273\031\046" +
    "\032\036\035\032\036\043\037\024\041\047\045\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\005\242\006\230\007\u011b\010" +
    "\035\011\037\012\040\013\237\014\241\016\235\017\251" +
    "\020\226\021\233\023\247\025\227\027\243\030\244\031" +
    "\046\032\036\035\032\036\043\037\024\041\047\045\231" +
    "\001\001\000\056\005\271\006\262\010\035\011\037\012" +
    "\040\013\266\014\267\016\265\017\275\020\260\021\264" +
    "\023\274\025\261\027\272\030\273\031\046\032\036\035" +
    "\032\036\043\037\024\041\047\045\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\005" +
    "\242\006\230\007\u0120\010\035\011\037\012\040\013\237" +
    "\014\241\016\235\017\251\020\226\021\233\023\247\025" +
    "\227\027\243\030\244\031\046\032\036\035\032\036\043" +
    "\037\024\041\047\045\231\001\001\000\056\005\271\006" +
    "\262\010\035\011\037\012\040\013\266\014\267\016\265" +
    "\017\275\020\260\021\264\023\274\025\261\027\272\030" +
    "\273\031\046\032\036\035\032\036\043\037\024\041\047" +
    "\045\263\001\001\000\002\001\001\000\060\005\242\006" +
    "\230\007\u0123\010\035\011\037\012\040\013\237\014\241" +
    "\016\235\017\251\020\226\021\233\023\247\025\227\027" +
    "\243\030\244\031\046\032\036\035\032\036\043\037\024" +
    "\041\047\045\231\001\001\000\056\005\271\006\262\010" +
    "\035\011\037\012\040\013\266\014\267\016\265\017\275" +
    "\020\260\021\264\023\274\025\261\027\272\030\273\031" +
    "\046\032\036\035\032\036\043\037\024\041\047\045\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\005\242\006\230\007\u0128\010\035\011\037" +
    "\012\040\013\237\014\241\016\235\017\251\020\226\021" +
    "\233\023\247\025\227\027\243\030\244\031\046\032\036" +
    "\035\032\036\043\037\024\041\047\045\231\001\001\000" +
    "\056\005\271\006\262\010\035\011\037\012\040\013\266" +
    "\014\267\016\265\017\275\020\260\021\264\023\274\025" +
    "\261\027\272\030\273\031\046\032\036\035\032\036\043" +
    "\037\024\041\047\045\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\005\242\006\230" +
    "\007\u012d\010\035\011\037\012\040\013\237\014\241\016" +
    "\235\017\251\020\226\021\233\023\247\025\227\027\243" +
    "\030\244\031\046\032\036\035\032\036\043\037\024\041" +
    "\047\045\231\001\001\000\056\005\271\006\262\010\035" +
    "\011\037\012\040\013\266\014\267\016\265\017\275\020" +
    "\260\021\264\023\274\025\261\027\272\030\273\031\046" +
    "\032\036\035\032\036\043\037\024\041\047\045\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\005\242\006\230\007\u0132\010\035\011\037\012" +
    "\040\013\237\014\241\016\235\017\251\020\226\021\233" +
    "\023\247\025\227\027\243\030\244\031\046\032\036\035" +
    "\032\036\043\037\024\041\047\045\231\001\001\000\056" +
    "\005\271\006\262\010\035\011\037\012\040\013\266\014" +
    "\267\016\265\017\275\020\260\021\264\023\274\025\261" +
    "\027\272\030\273\031\046\032\036\035\032\036\043\037" +
    "\024\041\047\045\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\005\242\006\230\007" +
    "\u0137\010\035\011\037\012\040\013\237\014\241\016\235" +
    "\017\251\020\226\021\233\023\247\025\227\027\243\030" +
    "\244\031\046\032\036\035\032\036\043\037\024\041\047" +
    "\045\231\001\001\000\056\005\271\006\262\010\035\011" +
    "\037\012\040\013\266\014\267\016\265\017\275\020\260" +
    "\021\264\023\274\025\261\027\272\030\273\031\046\032" +
    "\036\035\032\036\043\037\024\041\047\045\263\001\001" +
    "\000\002\001\001\000\020\013\006\014\011\042\u013b\043" +
    "\004\044\015\046\010\047\007\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return lex.next_token();
    }


    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    //recuperacion de errores de sintaxis
    public void syntax_error(Symbol s) {
        System.out.println("!!Error de Sintaxis en : " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    }

    //manejo de errores fatales
    public void unrecovered_syntax_error(Symbol s) {
        System.out.println("!!Error fatal en : " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SI ::= GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SI",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GEN ::= funcStruc GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GEN ::= mainStruc GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GEN ::= arrayInsGl ENDEXPR GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GEN ::= varInsGl ENDEXPR GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GEN ::= varInsAsigGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GEN ::= varInsAsigGl GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GEN ::= funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GEN ::= mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GEN ::= arrayInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GEN ::= varInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GEN ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GEN ::= error GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GEN ::= arrayInsAsignGl GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GEN ::= arrayInsAsignGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOCK ::= BLOCK exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOCK ::= BLOCK varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOCK ::= BLOCK mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOCK ::= BLOCK funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOCK ::= BLOCK varIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOCK ::= BLOCK ifStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOCK ::= BLOCK ifElseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOCK ::= BLOCK whileStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BLOCK ::= BLOCK switchStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BLOCK ::= BLOCK forStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BLOCK ::= BLOCK arrayIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOCK ::= BLOCK varInsAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BLOCK ::= BLOCK arrayInsAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BLOCK ::= exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BLOCK ::= arrayIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOCK ::= arrayInsAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOCK ::= mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOCK ::= funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOCK ::= varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOCK ::= varInsAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOCK ::= varIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOCK ::= ifStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOCK ::= ifElseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOCK ::= switchStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOCK ::= forStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOCK ::= whileStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOCK ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // compAritOp ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // compAritOp ::= compAritOp MINPLS term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo MULTIPLESIMB"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // compAritOp ::= compAritOp PLUS term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo SUMA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // compAritOp ::= compAritOp MINUSW term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo RESTA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= term PRODUCT factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo PRODUCTO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= term DIVISION factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo COCIENTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= FLOATNUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= arrayElement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= paramList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= funcInvo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= PARENTS compAritOp PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exprP ::= exprLog 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exprP ::= compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exprP ::= exprUni 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exprLog ::= compAritOp opRel compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exprLog ::= PARENTS exprLog PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprLog ::= MINUSW compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprLog ::= PLUS compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exprLog ::= MINPLS compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exprLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exprLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exprUni ::= exprLog opLog exprP 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 1"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exprUni ::= IDENTIFIER opLog exprP 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exprUni ::= PARENTS exprUni PARENTC 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 3"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // opRel ::= GRATHER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // opRel ::= GRATHERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // opRel ::= LOWER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // opRel ::= LOWERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // opRel ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // opRel ::= COMPARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // opLog ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // opLog ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // varAsig ::= IDENTIFIER EQ exprP ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se asigno VAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAsig",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // varAsig ::= EQ exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAsig",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // varIns ::= LOC SEP INT SEP IDENTIFIER 
            {
              Object RESULT =null;
		System.out.println("Se creo variable local");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // varIns ::= LOC SEP CHAR SEP IDENTIFIER 
            {
              Object RESULT =null;
		System.out.println("Se creo variable local");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // varIns ::= LOC SEP FLOAT SEP IDENTIFIER 
            {
              Object RESULT =null;
		System.out.println("Se creo variable local");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // varIns ::= LOC SEP BOOL SEP IDENTIFIER 
            {
              Object RESULT =null;
		System.out.println("Se creo variable local");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // varIns ::= LOC SEP STRINGT SEP IDENTIFIER 
            {
              Object RESULT =null;
		System.out.println("Se creo variable local");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // varInsGl ::= GLOB SEP INT SEP IDENTIFIER 
            {
              Object RESULT =null;
		System.out.println("Se creo variable global");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // varInsGl ::= GLOB SEP CHAR SEP IDENTIFIER 
            {
              Object RESULT =null;
		System.out.println("Se creo variable global");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // varInsGl ::= GLOB SEP FLOAT SEP IDENTIFIER 
            {
              Object RESULT =null;
		System.out.println("Se creo variable global");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // varInsGl ::= GLOB SEP STRINGT SEP IDENTIFIER 
            {
              Object RESULT =null;
		System.out.println("Se creo variable global");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // varInsGl ::= GLOB SEP BOOL SEP IDENTIFIER 
            {
              Object RESULT =null;
		System.out.println("Se creo variable global");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // varInsAsig ::= varIns varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsAsig",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // varInsAsigGl ::= varInsGl varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsAsigGl",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // funcStruc ::= FUNC SEP INT SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // funcStruc ::= FUNC SEP CHAR SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // funcStruc ::= FUNC SEP BOOL SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // funcStruc ::= FUNC SEP STRINGT SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // funcStruc ::= FUNC SEP FLOAT SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // mainStruc ::= FUNC SEP INT SEP MAIN DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion MAIN  ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainStruc",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // paramFunc ::= IDENTIFIER COMA paramFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramFunc",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // paramFunc ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramFunc",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // funcInvo ::= IDENTIFIER PARENTS paramFunc PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcInvo",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ifStruc ::= IF PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura condicional IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStruc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ifElseStruc ::= ifStruc ELSE SEP DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifElseStruc",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // whileStruc ::= WHILE PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro el ciclo while");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStruc",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // arrayIns ::= LOC SEP INT SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayIns",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arrayIns ::= LOC SEP CHAR SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayIns",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arrayInsGl ::= GLOB SEP INT SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsGl",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arrayInsGl ::= GLOB SEP CHAR SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsGl",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arrayAsig ::= IDENTIFIER EQ SQUARES elementos SQUAREC ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayAsig",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arrayAsig ::= EQ SQUARES elementos SQUAREC ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayAsig",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // elementos ::= compAritOp COMA elementos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // elementos ::= compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // arrayInsAsign ::= arrayIns arrayAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsAsign",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // arrayInsAsignGl ::= arrayInsGl arrayAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsAsignGl",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // arrayElement ::= IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayElement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // switchStruc ::= SWITCH PARENTS IDENTIFIER PARENTC DELIMETERBLOCK caseStruc DEFAULT SEP BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura switch");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switchStruc",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // caseStruc ::= CASE SEP compAritOp SEP BLOCK BREAK ENDEXPR caseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseStruc",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // caseStruc ::= CASE SEP compAritOp SEP BLOCK BREAK ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseStruc",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // forStruc ::= FOR IDENTIFIER IN RANGE PARENTS INTEGER_LITERAL COMA INTEGER_LITERAL PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStruc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // forStruc ::= FOR IDENTIFIER IN RANGE PARENTS INTEGER_LITERAL PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStruc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // forStruc ::= FOR IDENTIFIER IN RANGE PARENTS INTEGER_LITERAL COMA INTEGER_LITERAL COMA INTEGER_LITERAL PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStruc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // paramStruc ::= PARAM SEP INT SEP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // paramStruc ::= PARAM SEP CHAR SEP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // paramStruc ::= PARAM SEP STRINGT SEP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // paramStruc ::= PARAM SEP FLOAT SEP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // paramStruc ::= PARAM SEP BOOL SEP IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // paramList ::= paramStruc paramList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // paramList ::= paramStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
