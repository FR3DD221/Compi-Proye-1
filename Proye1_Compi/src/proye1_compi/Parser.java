
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proye1_compi;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\004\003\000\002\007" +
    "\005\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\012" +
    "\003\000\002\012\005\000\002\012\005\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\005\000\002\030" +
    "\005\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\003\000\002\030\003\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\003\000\002\033\003" +
    "\000\002\006\006\000\002\005\010\000\002\005\010\000" +
    "\002\005\010\000\002\005\010\000\002\005\010\000\002" +
    "\005\010\000\002\005\010\000\002\005\010\000\002\013" +
    "\012\000\002\013\012\000\002\013\012\000\002\013\012" +
    "\000\002\014\012\000\002\016\011\000\002\017\007\000" +
    "\002\020\011\000\002\021\014\000\002\021\014\000\002" +
    "\021\014\000\002\021\014\000\002\022\006\000\002\024" +
    "\005\000\002\024\003\000\002\023\004\000\002\034\006" +
    "\000\002\025\014\000\002\026\012\000\002\026\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\042\004\013\006\005\010\017\015\014\022" +
    "\040\034\031\040\022\061\034\062\016\063\036\064\020" +
    "\066\006\072\015\075\027\076\004\104\024\001\002\000" +
    "\004\060\307\001\002\000\014\004\071\022\040\040\022" +
    "\061\034\104\066\001\002\000\004\104\300\001\002\000" +
    "\050\002\uffec\004\uffec\006\uffec\010\uffec\015\uffec\022\uffec" +
    "\024\uffec\034\uffec\040\uffec\042\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\066\uffec\072\uffec\075\uffec\076\uffec\104\uffec" +
    "\001\002\000\004\110\277\001\002\000\050\002\ufff0\004" +
    "\ufff0\006\ufff0\010\ufff0\015\ufff0\022\ufff0\024\ufff0\034\ufff0" +
    "\040\ufff0\042\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\066" +
    "\ufff0\072\ufff0\075\ufff0\076\ufff0\104\ufff0\001\002\000\050" +
    "\002\uffeb\004\uffeb\006\uffeb\010\uffeb\015\uffeb\022\uffeb\024" +
    "\uffeb\034\uffeb\040\uffeb\042\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\066\uffeb\072\uffeb\075\uffeb\076\uffeb\104\uffeb\001" +
    "\002\000\042\006\uffdf\010\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\045\274\047\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\056\123\057\124\106\072\110\uffdf\001\002\000\014" +
    "\004\071\022\040\040\022\061\034\104\066\001\002\000" +
    "\004\104\252\001\002\000\012\056\uffd4\057\uffd4\105\uffd4" +
    "\110\uffd4\001\002\000\014\004\071\022\040\040\022\061" +
    "\034\104\066\001\002\000\004\104\243\001\002\000\046" +
    "\006\uffde\010\uffde\013\uffde\014\uffde\015\uffde\037\uffde\047" +
    "\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\105\uffde\107\uffde\110\uffde\001\002\000" +
    "\046\006\uffe0\010\uffe0\013\uffe0\014\uffe0\015\uffe0\037\uffe0" +
    "\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\105\uffe0\107\uffe0\110\uffe0\001\002" +
    "\000\052\002\uffed\004\uffed\006\uffed\010\uffed\015\uffed\022" +
    "\uffed\024\uffed\034\uffed\040\uffed\042\uffed\061\uffed\062\uffed" +
    "\063\uffed\064\uffed\065\115\066\uffed\072\uffed\075\uffed\076" +
    "\uffed\104\uffed\001\002\000\026\004\126\006\005\010\017" +
    "\015\014\022\040\040\022\061\034\062\016\063\036\104" +
    "\024\001\002\000\004\110\235\001\002\000\030\006\077" +
    "\010\101\015\100\047\233\051\227\052\230\053\225\054" +
    "\232\055\231\105\uffdb\110\uffdb\001\002\000\004\060\170" +
    "\001\002\000\006\105\uffda\110\uffda\001\002\000\004\060" +
    "\133\001\002\000\046\006\uffe5\010\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\037\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\105\uffe5\107\uffe5" +
    "\110\uffe5\001\002\000\046\006\uffe9\010\uffe9\013\103\014" +
    "\104\015\uffe9\037\uffe9\047\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\105\uffe9\107" +
    "\uffe9\110\uffe9\001\002\000\046\006\uffe1\010\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\037\uffe1\047\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\105\uffe1" +
    "\107\uffe1\110\uffe1\001\002\000\004\002\132\001\002\000" +
    "\012\056\uffd3\057\uffd3\105\uffd3\110\uffd3\001\002\000\050" +
    "\002\uffee\004\uffee\006\uffee\010\uffee\015\uffee\022\uffee\024" +
    "\uffee\034\uffee\040\uffee\042\uffee\061\uffee\062\uffee\063\uffee" +
    "\064\uffee\066\uffee\072\uffee\075\uffee\076\uffee\104\uffee\001" +
    "\002\000\046\006\uffe2\010\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\037\uffe2\047\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\105\uffe2\107\uffe2\110\uffe2" +
    "\001\002\000\050\002\uffea\004\uffea\006\uffea\010\uffea\015" +
    "\uffea\022\uffea\024\uffea\034\uffea\040\uffea\042\uffea\061\uffea" +
    "\062\uffea\063\uffea\064\uffea\066\uffea\072\uffea\075\uffea\076" +
    "\uffea\104\uffea\001\002\000\006\045\063\110\131\001\002" +
    "\000\050\002\ufff1\004\ufff1\006\ufff1\010\ufff1\015\ufff1\022" +
    "\ufff1\024\ufff1\034\ufff1\040\ufff1\042\ufff1\061\ufff1\062\ufff1" +
    "\063\ufff1\064\ufff1\066\ufff1\072\ufff1\075\ufff1\076\ufff1\104" +
    "\ufff1\001\002\000\050\002\uffef\004\uffef\006\uffef\010\uffef" +
    "\015\uffef\022\uffef\024\uffef\034\uffef\040\uffef\042\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\066\uffef\072\uffef\075\uffef" +
    "\076\uffef\104\uffef\001\002\000\012\056\123\057\124\105" +
    "\uffdc\110\uffdc\001\002\000\044\002\000\004\013\006\005" +
    "\010\017\015\014\022\040\034\031\040\022\061\034\062" +
    "\016\063\036\064\020\066\006\072\015\075\027\076\004" +
    "\104\024\001\002\000\050\002\ufff9\004\ufff9\006\ufff9\010" +
    "\ufff9\015\ufff9\022\ufff9\024\ufff9\034\ufff9\040\ufff9\042\ufff9" +
    "\061\ufff9\062\ufff9\063\ufff9\064\ufff9\066\ufff9\072\ufff9\075" +
    "\ufff9\076\ufff9\104\ufff9\001\002\000\004\110\121\001\002" +
    "\000\050\002\ufffc\004\ufffc\006\ufffc\010\ufffc\015\ufffc\022" +
    "\ufffc\024\ufffc\034\ufffc\040\ufffc\042\ufffc\061\ufffc\062\ufffc" +
    "\063\ufffc\064\ufffc\066\ufffc\072\ufffc\075\ufffc\076\ufffc\104" +
    "\ufffc\001\002\000\050\002\ufff7\004\ufff7\006\ufff7\010\ufff7" +
    "\015\ufff7\022\ufff7\024\ufff7\034\ufff7\040\ufff7\042\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\064\ufff7\066\ufff7\072\ufff7\075\ufff7" +
    "\076\ufff7\104\ufff7\001\002\000\052\002\ufffa\004\ufffa\006" +
    "\ufffa\010\ufffa\015\ufffa\022\ufffa\024\ufffa\034\ufffa\040\ufffa" +
    "\042\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\115\066" +
    "\ufffa\072\ufffa\075\ufffa\076\ufffa\104\ufffa\001\002\000\004" +
    "\110\114\001\002\000\050\002\ufffb\004\ufffb\006\ufffb\010" +
    "\ufffb\015\ufffb\022\ufffb\024\ufffb\034\ufffb\040\ufffb\042\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb\072\ufffb\075" +
    "\ufffb\076\ufffb\104\ufffb\001\002\000\050\002\ufff8\004\ufff8" +
    "\006\ufff8\010\ufff8\015\ufff8\022\ufff8\024\ufff8\034\ufff8\040" +
    "\ufff8\042\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\066\ufff8" +
    "\072\ufff8\075\ufff8\076\ufff8\104\ufff8\001\002\000\006\045" +
    "\063\110\062\001\002\000\050\002\ufffd\004\ufffd\006\ufffd" +
    "\010\ufffd\015\ufffd\022\ufffd\024\ufffd\034\ufffd\040\ufffd\042" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\066\ufffd\072\ufffd" +
    "\075\ufffd\076\ufffd\104\ufffd\001\002\000\050\002\ufffe\004" +
    "\ufffe\006\ufffe\010\ufffe\015\ufffe\022\ufffe\024\ufffe\034\ufffe" +
    "\040\ufffe\042\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\066" +
    "\ufffe\072\ufffe\075\ufffe\076\ufffe\104\ufffe\001\002\000\050" +
    "\002\ufff6\004\ufff6\006\ufff6\010\ufff6\015\ufff6\022\ufff6\024" +
    "\ufff6\034\ufff6\040\ufff6\042\ufff6\061\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\066\ufff6\072\ufff6\075\ufff6\076\ufff6\104\ufff6\001" +
    "\002\000\004\106\065\001\002\000\004\110\uffaf\001\002" +
    "\000\014\004\071\022\040\040\022\061\034\104\066\001" +
    "\002\000\014\004\071\022\040\040\022\061\034\104\066" +
    "\001\002\000\014\006\077\010\101\015\100\037\076\107" +
    "\uffb0\001\002\000\004\107\075\001\002\000\050\006\uffdf" +
    "\010\uffdf\013\uffdf\014\uffdf\015\uffdf\037\uffdf\047\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\105\uffdf\106\072\107\uffdf\110\uffdf\001\002\000" +
    "\004\022\073\001\002\000\004\107\074\001\002\000\046" +
    "\006\uffae\010\uffae\013\uffae\014\uffae\015\uffae\037\uffae\047" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\057\uffae\060\uffae\105\uffae\107\uffae\110\uffae\001\002\000" +
    "\004\110\uffb2\001\002\000\014\004\071\022\040\040\022" +
    "\061\034\104\066\001\002\000\014\004\071\022\040\040" +
    "\022\061\034\104\066\001\002\000\014\004\071\022\040" +
    "\040\022\061\034\104\066\001\002\000\014\004\071\022" +
    "\040\040\022\061\034\104\066\001\002\000\046\006\uffe6" +
    "\010\uffe6\013\103\014\104\015\uffe6\037\uffe6\047\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6" +
    "\060\uffe6\105\uffe6\107\uffe6\110\uffe6\001\002\000\014\004" +
    "\071\022\040\040\022\061\034\104\066\001\002\000\014" +
    "\004\071\022\040\040\022\061\034\104\066\001\002\000" +
    "\046\006\uffe3\010\uffe3\013\uffe3\014\uffe3\015\uffe3\037\uffe3" +
    "\047\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\105\uffe3\107\uffe3\110\uffe3\001\002" +
    "\000\046\006\uffe4\010\uffe4\013\uffe4\014\uffe4\015\uffe4\037" +
    "\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\060\uffe4\105\uffe4\107\uffe4\110\uffe4\001" +
    "\002\000\046\006\uffe8\010\uffe8\013\103\014\104\015\uffe8" +
    "\037\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\057\uffe8\060\uffe8\105\uffe8\107\uffe8\110\uffe8" +
    "\001\002\000\046\006\uffe7\010\uffe7\013\103\014\104\015" +
    "\uffe7\037\uffe7\047\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\105\uffe7\107\uffe7\110" +
    "\uffe7\001\002\000\004\107\uffb1\001\002\000\012\006\077" +
    "\010\101\015\100\105\113\001\002\000\046\006\uffdd\010" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\037\uffdd\047\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\105\uffdd\107\uffdd\110\uffdd\001\002\000\050\002\ufff5" +
    "\004\ufff5\006\ufff5\010\ufff5\015\ufff5\022\ufff5\024\ufff5\034" +
    "\ufff5\040\ufff5\042\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5" +
    "\066\ufff5\072\ufff5\075\ufff5\076\ufff5\104\ufff5\001\002\000" +
    "\004\024\116\001\002\000\042\004\013\006\005\010\017" +
    "\015\014\022\040\034\031\040\022\061\034\062\016\063" +
    "\036\064\020\066\006\072\015\075\027\076\004\104\024" +
    "\001\002\000\044\004\013\006\005\010\017\015\014\022" +
    "\040\024\120\034\031\040\022\061\034\062\016\063\036" +
    "\064\020\066\006\072\015\075\027\076\004\104\024\001" +
    "\002\000\050\002\uffb8\004\uffb8\006\uffb8\010\uffb8\015\uffb8" +
    "\022\uffb8\024\uffb8\034\uffb8\040\uffb8\042\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\066\uffb8\072\uffb8\075\uffb8\076\uffb8" +
    "\104\uffb8\001\002\000\050\002\uffff\004\uffff\006\uffff\010" +
    "\uffff\015\uffff\022\uffff\024\uffff\034\uffff\040\uffff\042\uffff" +
    "\061\uffff\062\uffff\063\uffff\064\uffff\066\uffff\072\uffff\075" +
    "\uffff\076\uffff\104\uffff\001\002\000\026\004\126\006\005" +
    "\010\017\015\014\022\040\040\022\061\034\062\016\063" +
    "\036\104\024\001\002\000\026\004\uffc9\006\uffc9\010\uffc9" +
    "\015\uffc9\022\uffc9\040\uffc9\061\uffc9\062\uffc9\063\uffc9\104" +
    "\uffc9\001\002\000\026\004\uffc8\006\uffc8\010\uffc8\015\uffc8" +
    "\022\uffc8\040\uffc8\061\uffc8\062\uffc8\063\uffc8\104\uffc8\001" +
    "\002\000\006\105\uffd2\110\uffd2\001\002\000\042\006\uffdf" +
    "\010\uffdf\013\uffdf\014\uffdf\015\uffdf\047\uffdf\051\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\056\123\057\124\105\uffdf" +
    "\106\072\110\uffdf\001\002\000\026\004\126\006\005\010" +
    "\017\015\014\022\040\040\022\061\034\062\016\063\036" +
    "\104\024\001\002\000\006\105\uffd1\110\uffd1\001\002\000" +
    "\050\002\ufff3\004\ufff3\006\ufff3\010\ufff3\015\ufff3\022\ufff3" +
    "\024\ufff3\034\ufff3\040\ufff3\042\ufff3\061\ufff3\062\ufff3\063" +
    "\ufff3\064\ufff3\066\ufff3\072\ufff3\075\ufff3\076\ufff3\104\ufff3" +
    "\001\002\000\004\002\001\001\002\000\012\027\137\030" +
    "\136\031\135\032\134\001\002\000\004\060\163\001\002" +
    "\000\004\060\156\001\002\000\004\060\151\001\002\000" +
    "\004\060\140\001\002\000\006\004\142\035\141\001\002" +
    "\000\004\024\146\001\002\000\004\024\143\001\002\000" +
    "\042\004\013\006\005\010\017\015\014\022\040\034\031" +
    "\040\022\061\034\062\016\063\036\064\020\066\006\072" +
    "\015\075\027\076\004\104\024\001\002\000\044\004\013" +
    "\006\005\010\017\015\014\022\040\024\145\034\031\040" +
    "\022\061\034\062\016\063\036\064\020\066\006\072\015" +
    "\075\027\076\004\104\024\001\002\000\050\002\uffbe\004" +
    "\uffbe\006\uffbe\010\uffbe\015\uffbe\022\uffbe\024\uffbe\034\uffbe" +
    "\040\uffbe\042\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\066" +
    "\uffbe\072\uffbe\075\uffbe\076\uffbe\104\uffbe\001\002\000\042" +
    "\004\013\006\005\010\017\015\014\022\040\034\031\040" +
    "\022\061\034\062\016\063\036\064\020\066\006\072\015" +
    "\075\027\076\004\104\024\001\002\000\044\004\013\006" +
    "\005\010\017\015\014\022\040\024\150\034\031\040\022" +
    "\061\034\062\016\063\036\064\020\066\006\072\015\075" +
    "\027\076\004\104\024\001\002\000\050\002\uffba\004\uffba" +
    "\006\uffba\010\uffba\015\uffba\022\uffba\024\uffba\034\uffba\040" +
    "\uffba\042\uffba\061\uffba\062\uffba\063\uffba\064\uffba\066\uffba" +
    "\072\uffba\075\uffba\076\uffba\104\uffba\001\002\000\004\004" +
    "\152\001\002\000\004\024\153\001\002\000\042\004\013" +
    "\006\005\010\017\015\014\022\040\034\031\040\022\061" +
    "\034\062\016\063\036\064\020\066\006\072\015\075\027" +
    "\076\004\104\024\001\002\000\044\004\013\006\005\010" +
    "\017\015\014\022\040\024\155\034\031\040\022\061\034" +
    "\062\016\063\036\064\020\066\006\072\015\075\027\076" +
    "\004\104\024\001\002\000\050\002\uffbd\004\uffbd\006\uffbd" +
    "\010\uffbd\015\uffbd\022\uffbd\024\uffbd\034\uffbd\040\uffbd\042" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\066\uffbd\072\uffbd" +
    "\075\uffbd\076\uffbd\104\uffbd\001\002\000\004\004\157\001" +
    "\002\000\004\024\160\001\002\000\042\004\013\006\005" +
    "\010\017\015\014\022\040\034\031\040\022\061\034\062" +
    "\016\063\036\064\020\066\006\072\015\075\027\076\004" +
    "\104\024\001\002\000\044\004\013\006\005\010\017\015" +
    "\014\022\040\024\162\034\031\040\022\061\034\062\016" +
    "\063\036\064\020\066\006\072\015\075\027\076\004\104" +
    "\024\001\002\000\050\002\uffbb\004\uffbb\006\uffbb\010\uffbb" +
    "\015\uffbb\022\uffbb\024\uffbb\034\uffbb\040\uffbb\042\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\066\uffbb\072\uffbb\075\uffbb" +
    "\076\uffbb\104\uffbb\001\002\000\004\004\164\001\002\000" +
    "\004\024\165\001\002\000\042\004\013\006\005\010\017" +
    "\015\014\022\040\034\031\040\022\061\034\062\016\063" +
    "\036\064\020\066\006\072\015\075\027\076\004\104\024" +
    "\001\002\000\044\004\013\006\005\010\017\015\014\022" +
    "\040\024\167\034\031\040\022\061\034\062\016\063\036" +
    "\064\020\066\006\072\015\075\027\076\004\104\024\001" +
    "\002\000\050\002\uffbc\004\uffbc\006\uffbc\010\uffbc\015\uffbc" +
    "\022\uffbc\024\uffbc\034\uffbc\040\uffbc\042\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\066\uffbc\072\uffbc\075\uffbc\076\uffbc" +
    "\104\uffbc\001\002\000\012\027\174\030\173\031\172\032" +
    "\171\001\002\000\004\060\222\001\002\000\004\060\217" +
    "\001\002\000\004\060\206\001\002\000\004\060\175\001" +
    "\002\000\006\004\176\074\177\001\002\000\004\110\205" +
    "\001\002\000\004\060\200\001\002\000\004\004\201\001" +
    "\002\000\004\106\202\001\002\000\004\022\203\001\002" +
    "\000\004\107\204\001\002\000\006\045\uffb6\110\uffb6\001" +
    "\002\000\050\002\uffc6\004\uffc6\006\uffc6\010\uffc6\015\uffc6" +
    "\022\uffc6\024\uffc6\034\uffc6\040\uffc6\042\uffc6\061\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\066\uffc6\072\uffc6\075\uffc6\076\uffc6" +
    "\104\uffc6\001\002\000\006\004\207\074\210\001\002\000" +
    "\004\110\216\001\002\000\004\060\211\001\002\000\004" +
    "\004\212\001\002\000\004\106\213\001\002\000\004\022" +
    "\214\001\002\000\004\107\215\001\002\000\006\045\uffb5" +
    "\110\uffb5\001\002\000\050\002\uffc5\004\uffc5\006\uffc5\010" +
    "\uffc5\015\uffc5\022\uffc5\024\uffc5\034\uffc5\040\uffc5\042\uffc5" +
    "\061\uffc5\062\uffc5\063\uffc5\064\uffc5\066\uffc5\072\uffc5\075" +
    "\uffc5\076\uffc5\104\uffc5\001\002\000\004\004\220\001\002" +
    "\000\004\110\221\001\002\000\050\002\uffc4\004\uffc4\006" +
    "\uffc4\010\uffc4\015\uffc4\022\uffc4\024\uffc4\034\uffc4\040\uffc4" +
    "\042\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\066\uffc4\072" +
    "\uffc4\075\uffc4\076\uffc4\104\uffc4\001\002\000\004\004\223" +
    "\001\002\000\004\110\224\001\002\000\050\002\uffc3\004" +
    "\uffc3\006\uffc3\010\uffc3\015\uffc3\022\uffc3\024\uffc3\034\uffc3" +
    "\040\uffc3\042\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\066" +
    "\uffc3\072\uffc3\075\uffc3\076\uffc3\104\uffc3\001\002\000\014" +
    "\004\uffcd\022\uffcd\040\uffcd\061\uffcd\104\uffcd\001\002\000" +
    "\014\004\071\022\040\040\022\061\034\104\066\001\002" +
    "\000\014\004\uffcf\022\uffcf\040\uffcf\061\uffcf\104\uffcf\001" +
    "\002\000\014\004\uffce\022\uffce\040\uffce\061\uffce\104\uffce" +
    "\001\002\000\014\004\uffca\022\uffca\040\uffca\061\uffca\104" +
    "\uffca\001\002\000\014\004\uffcc\022\uffcc\040\uffcc\061\uffcc" +
    "\104\uffcc\001\002\000\014\004\uffcb\022\uffcb\040\uffcb\061" +
    "\uffcb\104\uffcb\001\002\000\020\006\077\010\101\015\100" +
    "\056\uffd9\057\uffd9\105\uffd9\110\uffd9\001\002\000\050\002" +
    "\ufff2\004\ufff2\006\ufff2\010\ufff2\015\ufff2\022\ufff2\024\ufff2" +
    "\034\ufff2\040\ufff2\042\ufff2\061\ufff2\062\ufff2\063\ufff2\064" +
    "\ufff2\066\ufff2\072\ufff2\075\ufff2\076\ufff2\104\ufff2\001\002" +
    "\000\026\006\077\010\101\015\100\047\233\051\227\052" +
    "\230\053\225\054\232\055\231\105\113\001\002\000\010" +
    "\056\123\057\124\105\242\001\002\000\004\105\241\001" +
    "\002\000\006\105\uffd0\110\uffd0\001\002\000\012\056\uffd8" +
    "\057\uffd8\105\uffd8\110\uffd8\001\002\000\026\004\126\006" +
    "\005\010\017\015\014\022\040\040\022\061\034\062\016" +
    "\063\036\104\024\001\002\000\004\105\245\001\002\000" +
    "\004\024\246\001\002\000\042\004\013\006\005\010\017" +
    "\015\014\022\040\034\031\040\022\061\034\062\016\063" +
    "\036\064\020\066\006\072\015\075\027\076\004\104\024" +
    "\001\002\000\044\004\013\006\005\010\017\015\014\022" +
    "\040\024\250\034\031\040\022\061\034\062\016\063\036" +
    "\064\020\066\006\072\015\075\027\076\004\104\024\001" +
    "\002\000\052\002\uffb9\004\uffb9\006\uffb9\010\uffb9\015\uffb9" +
    "\022\uffb9\024\uffb9\034\uffb9\040\uffb9\042\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\072\uffb9\075\uffb9" +
    "\076\uffb9\104\uffb9\001\002\000\020\006\077\010\101\015" +
    "\100\056\uffd7\057\uffd7\105\uffd7\110\uffd7\001\002\000\004" +
    "\004\253\001\002\000\004\105\254\001\002\000\004\024" +
    "\255\001\002\000\004\073\257\001\002\000\004\100\267" +
    "\001\002\000\004\060\260\001\002\000\014\004\071\022" +
    "\040\040\022\061\034\104\066\001\002\000\012\006\077" +
    "\010\101\015\100\060\262\001\002\000\042\004\013\006" +
    "\005\010\017\015\014\022\040\034\031\040\022\061\034" +
    "\062\016\063\036\064\020\066\006\072\015\075\027\076" +
    "\004\104\024\001\002\000\044\004\013\006\005\010\017" +
    "\015\014\022\040\034\031\040\022\042\264\061\034\062" +
    "\016\063\036\064\020\066\006\072\015\075\027\076\004" +
    "\104\024\001\002\000\004\110\265\001\002\000\006\073" +
    "\257\100\uffab\001\002\000\004\100\uffac\001\002\000\004" +
    "\060\270\001\002\000\042\004\013\006\005\010\017\015" +
    "\014\022\040\034\031\040\022\061\034\062\016\063\036" +
    "\064\020\066\006\072\015\075\027\076\004\104\024\001" +
    "\002\000\044\004\013\006\005\010\017\015\014\022\040" +
    "\024\272\034\031\040\022\061\034\062\016\063\036\064" +
    "\020\066\006\072\015\075\027\076\004\104\024\001\002" +
    "\000\050\002\uffad\004\uffad\006\uffad\010\uffad\015\uffad\022" +
    "\uffad\024\uffad\034\uffad\040\uffad\042\uffad\061\uffad\062\uffad" +
    "\063\uffad\064\uffad\066\uffad\072\uffad\075\uffad\076\uffad\104" +
    "\uffad\001\002\000\020\006\077\010\101\015\100\056\uffd5" +
    "\057\uffd5\105\uffd5\110\uffd5\001\002\000\026\004\126\006" +
    "\005\010\017\015\014\022\040\040\022\061\034\062\016" +
    "\063\036\104\024\001\002\000\004\110\276\001\002\000" +
    "\050\002\uffc7\004\uffc7\006\uffc7\010\uffc7\015\uffc7\022\uffc7" +
    "\024\uffc7\034\uffc7\040\uffc7\042\uffc7\061\uffc7\062\uffc7\063" +
    "\uffc7\064\uffc7\066\uffc7\072\uffc7\075\uffc7\076\uffc7\104\uffc7" +
    "\001\002\000\050\002\ufff4\004\ufff4\006\ufff4\010\ufff4\015" +
    "\ufff4\022\ufff4\024\ufff4\034\ufff4\040\ufff4\042\ufff4\061\ufff4" +
    "\062\ufff4\063\ufff4\064\ufff4\066\ufff4\072\ufff4\075\ufff4\076" +
    "\ufff4\104\ufff4\001\002\000\026\004\126\006\005\010\017" +
    "\015\014\022\040\040\022\061\034\062\016\063\036\104" +
    "\024\001\002\000\004\105\302\001\002\000\004\024\303" +
    "\001\002\000\042\004\013\006\005\010\017\015\014\022" +
    "\040\034\031\040\022\061\034\062\016\063\036\064\020" +
    "\066\006\072\015\075\027\076\004\104\024\001\002\000" +
    "\044\004\013\006\005\010\017\015\014\022\040\024\305" +
    "\034\031\040\022\061\034\062\016\063\036\064\020\066" +
    "\006\072\015\075\027\076\004\104\024\001\002\000\050" +
    "\002\uffb7\004\uffb7\006\uffb7\010\uffb7\015\uffb7\022\uffb7\024" +
    "\uffb7\034\uffb7\040\uffb7\042\uffb7\061\uffb7\062\uffb7\063\uffb7" +
    "\064\uffb7\066\uffb7\072\uffb7\075\uffb7\076\uffb7\104\uffb7\001" +
    "\002\000\020\006\077\010\101\015\100\056\uffd6\057\uffd6" +
    "\105\uffd6\110\uffd6\001\002\000\012\027\313\030\311\031" +
    "\312\032\310\001\002\000\004\060\341\001\002\000\004" +
    "\060\330\001\002\000\004\060\325\001\002\000\004\060" +
    "\314\001\002\000\006\004\315\074\316\001\002\000\004" +
    "\110\324\001\002\000\004\060\317\001\002\000\004\004" +
    "\320\001\002\000\004\106\321\001\002\000\004\022\322" +
    "\001\002\000\004\107\323\001\002\000\006\045\uffb4\110" +
    "\uffb4\001\002\000\050\002\uffc2\004\uffc2\006\uffc2\010\uffc2" +
    "\015\uffc2\022\uffc2\024\uffc2\034\uffc2\040\uffc2\042\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\066\uffc2\072\uffc2\075\uffc2" +
    "\076\uffc2\104\uffc2\001\002\000\004\004\326\001\002\000" +
    "\004\110\327\001\002\000\050\002\uffc0\004\uffc0\006\uffc0" +
    "\010\uffc0\015\uffc0\022\uffc0\024\uffc0\034\uffc0\040\uffc0\042" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\066\uffc0\072\uffc0" +
    "\075\uffc0\076\uffc0\104\uffc0\001\002\000\006\004\331\074" +
    "\332\001\002\000\004\110\340\001\002\000\004\060\333" +
    "\001\002\000\004\004\334\001\002\000\004\106\335\001" +
    "\002\000\004\022\336\001\002\000\004\107\337\001\002" +
    "\000\006\045\uffb3\110\uffb3\001\002\000\050\002\uffc1\004" +
    "\uffc1\006\uffc1\010\uffc1\015\uffc1\022\uffc1\024\uffc1\034\uffc1" +
    "\040\uffc1\042\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\066" +
    "\uffc1\072\uffc1\075\uffc1\076\uffc1\104\uffc1\001\002\000\004" +
    "\004\342\001\002\000\004\110\343\001\002\000\050\002" +
    "\uffbf\004\uffbf\006\uffbf\010\uffbf\015\uffbf\022\uffbf\024\uffbf" +
    "\034\uffbf\040\uffbf\042\uffbf\061\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\066\uffbf\072\uffbf\075\uffbf\076\uffbf\104\uffbf\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\050\004\034\005\036\006\043\007\045\010" +
    "\025\011\031\012\032\013\010\014\042\016\022\017\006" +
    "\020\040\021\041\023\024\025\011\027\007\030\044\031" +
    "\027\034\020\001\001\000\002\001\001\000\012\010\305" +
    "\011\031\012\032\034\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\126\001\001\000\012\010\272\011" +
    "\031\012\032\034\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\250\011\031\012\032\034\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\235\011\031\012\032\030" +
    "\236\031\237\034\020\001\001\000\002\001\001\000\004" +
    "\032\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\121\001\001\000\044\005\054\006\060\010\025\011\031" +
    "\012\032\013\050\014\057\016\052\017\046\020\055\021" +
    "\056\023\053\025\051\027\047\030\044\031\027\034\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\066\011" +
    "\031\012\032\024\067\034\020\001\001\000\012\010\111" +
    "\011\031\012\032\034\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\066\011\031\012\032\024\110\034\020\001\001\000\010" +
    "\011\031\012\107\034\020\001\001\000\010\011\031\012" +
    "\106\034\020\001\001\000\010\011\031\012\101\034\020" +
    "\001\001\000\002\001\001\000\006\011\105\034\020\001" +
    "\001\000\006\011\104\034\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\005\036\006\043\007" +
    "\116\010\025\011\031\012\032\013\010\014\042\016\022" +
    "\017\006\020\040\021\041\023\024\025\011\027\007\030" +
    "\044\031\027\034\020\001\001\000\044\005\054\006\060" +
    "\010\025\011\031\012\032\013\050\014\057\016\052\017" +
    "\046\020\055\021\056\023\053\025\051\027\047\030\044" +
    "\031\027\034\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\025\011\031\012\032\027\124\030\044" +
    "\031\027\034\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\126\001\001\000\020" +
    "\010\025\011\031\012\032\027\127\030\044\031\027\034" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\005\036\006" +
    "\043\007\143\010\025\011\031\012\032\013\010\014\042" +
    "\016\022\017\006\020\040\021\041\023\024\025\011\027" +
    "\007\030\044\031\027\034\020\001\001\000\044\005\054" +
    "\006\060\010\025\011\031\012\032\013\050\014\057\016" +
    "\052\017\046\020\055\021\056\023\053\025\051\027\047" +
    "\030\044\031\027\034\020\001\001\000\002\001\001\000" +
    "\046\005\036\006\043\007\146\010\025\011\031\012\032" +
    "\013\010\014\042\016\022\017\006\020\040\021\041\023" +
    "\024\025\011\027\007\030\044\031\027\034\020\001\001" +
    "\000\044\005\054\006\060\010\025\011\031\012\032\013" +
    "\050\014\057\016\052\017\046\020\055\021\056\023\053" +
    "\025\051\027\047\030\044\031\027\034\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\005\036\006\043\007\153\010\025\011\031\012\032\013" +
    "\010\014\042\016\022\017\006\020\040\021\041\023\024" +
    "\025\011\027\007\030\044\031\027\034\020\001\001\000" +
    "\044\005\054\006\060\010\025\011\031\012\032\013\050" +
    "\014\057\016\052\017\046\020\055\021\056\023\053\025" +
    "\051\027\047\030\044\031\027\034\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\005" +
    "\036\006\043\007\160\010\025\011\031\012\032\013\010" +
    "\014\042\016\022\017\006\020\040\021\041\023\024\025" +
    "\011\027\007\030\044\031\027\034\020\001\001\000\044" +
    "\005\054\006\060\010\025\011\031\012\032\013\050\014" +
    "\057\016\052\017\046\020\055\021\056\023\053\025\051" +
    "\027\047\030\044\031\027\034\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\005\036" +
    "\006\043\007\165\010\025\011\031\012\032\013\010\014" +
    "\042\016\022\017\006\020\040\021\041\023\024\025\011" +
    "\027\007\030\044\031\027\034\020\001\001\000\044\005" +
    "\054\006\060\010\025\011\031\012\032\013\050\014\057" +
    "\016\052\017\046\020\055\021\056\023\053\025\051\027" +
    "\047\030\044\031\027\034\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\233\011\031\012\032\034\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\225\001\001\000\004\033" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\025\011\031\012\032\027\243\030" +
    "\044\031\027\034\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\005\036\006\043\007\246\010\025\011" +
    "\031\012\032\013\010\014\042\016\022\017\006\020\040" +
    "\021\041\023\024\025\011\027\007\030\044\031\027\034" +
    "\020\001\001\000\044\005\054\006\060\010\025\011\031" +
    "\012\032\013\050\014\057\016\052\017\046\020\055\021" +
    "\056\023\053\025\051\027\047\030\044\031\027\034\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\260\011\031\012\032\034\020\001\001\000\002\001\001" +
    "\000\046\005\036\006\043\007\262\010\025\011\031\012" +
    "\032\013\010\014\042\016\022\017\006\020\040\021\041" +
    "\023\024\025\011\027\007\030\044\031\027\034\020\001" +
    "\001\000\044\005\054\006\060\010\025\011\031\012\032" +
    "\013\050\014\057\016\052\017\046\020\055\021\056\023" +
    "\053\025\051\027\047\030\044\031\027\034\020\001\001" +
    "\000\002\001\001\000\004\026\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\005\036\006\043\007\270" +
    "\010\025\011\031\012\032\013\010\014\042\016\022\017" +
    "\006\020\040\021\041\023\024\025\011\027\007\030\044" +
    "\031\027\034\020\001\001\000\044\005\054\006\060\010" +
    "\025\011\031\012\032\013\050\014\057\016\052\017\046" +
    "\020\055\021\056\023\053\025\051\027\047\030\044\031" +
    "\027\034\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\025\011\031\012\032\027\274\030\044\031" +
    "\027\034\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\025\011\031\012\032\027" +
    "\300\030\044\031\027\034\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\005\036\006\043\007\303\010" +
    "\025\011\031\012\032\013\010\014\042\016\022\017\006" +
    "\020\040\021\041\023\024\025\011\027\007\030\044\031" +
    "\027\034\020\001\001\000\044\005\054\006\060\010\025" +
    "\011\031\012\032\013\050\014\057\016\052\017\046\020" +
    "\055\021\056\023\053\025\051\027\047\030\044\031\027" +
    "\034\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return lex.next_token();
    }


    // Connect this parser to a scanner!
    Lexer lex;

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    //recuperacion de errores de sintaxis
    public void syntax_error(Symbol s) {
        System.out.println("!!Error de Sintaxis en : " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    }

    //manejo de errores fatales
    public void unrecovered_syntax_error(Symbol s) {
        System.out.println("!!Error fatal en : " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SI ::= BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SI",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOCK ::= BLOCK exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOCK ::= BLOCK varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOCK ::= BLOCK mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOCK ::= BLOCK funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOCK ::= BLOCK varIns 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOCK ::= BLOCK ifStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOCK ::= BLOCK ifElseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOCK ::= BLOCK whileStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOCK ::= BLOCK switchStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOCK ::= BLOCK arrayIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOCK ::= BLOCK arrayInsAsign ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOCK ::= exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOCK ::= arrayIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOCK ::= arrayInsAsign ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOCK ::= mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOCK ::= funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOCK ::= varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOCK ::= varIns 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOCK ::= ifStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOCK ::= ifElseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOCK ::= switchStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOCK ::= whileStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compAritOp ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // compAritOp ::= compAritOp MINPLS term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo MULTIPLESIMB"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // compAritOp ::= compAritOp PLUS term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo SUMA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // compAritOp ::= compAritOp MINUSW term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo RESTA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term ::= term PRODUCT factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo PRODUCTO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term ::= term DIVISION factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo COCIENTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // factor ::= FLOATNUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // factor ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= arrayElement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= PARENTS compAritOp PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exprP ::= exprLog 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exprP ::= compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exprP ::= exprUni 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprLog ::= compAritOp opRel compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprLog ::= PARENTS exprLog PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exprLog ::= MINUSW compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exprLog ::= PLUS compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exprLog ::= MINPLS compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exprLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprUni ::= exprLog opLog exprP 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 1"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprUni ::= IDENTIFIER opLog exprP 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprUni ::= PARENTS exprUni PARENTC 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 3"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // opRel ::= GRATHER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // opRel ::= GRATHERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opRel ::= LOWER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // opRel ::= LOWERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // opRel ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // opRel ::= COMPARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // opLog ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // opLog ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // varAsig ::= IDENTIFIER EQ exprP ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se asigno VAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAsig",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // varIns ::= LOC SEP INT SEP IDENTIFIER ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se creo variable local");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // varIns ::= LOC SEP CHAR SEP IDENTIFIER ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se creo variable local");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // varIns ::= LOC SEP FLOAT SEP IDENTIFIER ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se creo variable local");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // varIns ::= LOC SEP BOOL SEP IDENTIFIER ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se creo variable local");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // varIns ::= GLOB SEP INT SEP IDENTIFIER ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se creo variable global");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // varIns ::= GLOB SEP CHAR SEP IDENTIFIER ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se creo variable global");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // varIns ::= GLOB SEP FLOAT SEP IDENTIFIER ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se creo variable global");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // varIns ::= GLOB SEP BOOL SEP IDENTIFIER ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se creo variable global");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funcStruc ::= FUNC SEP INT SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funcStruc ::= FUNC SEP CHAR SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // funcStruc ::= FUNC SEP BOOL SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // funcStruc ::= FUNC SEP FLOAT SEP IDENTIFIER DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion normal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // mainStruc ::= FUNC SEP INT SEP MAIN DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro funcion MAIN  ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainStruc",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ifStruc ::= IF PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura condicional IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStruc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ifElseStruc ::= ifStruc ELSE DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifElseStruc",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // whileStruc ::= WHILE PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro el ciclo while");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStruc",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arrayIns ::= LOC SEP INT SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayIns",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arrayIns ::= LOC SEP CHAR SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayIns",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arrayIns ::= GLOB SEP INT SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayIns",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arrayIns ::= GLOB SEP CHAR SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayIns",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arrayAsig ::= EQ SQUARES elementos SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayAsig",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // elementos ::= compAritOp COMA elementos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // elementos ::= compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arrayInsAsign ::= arrayIns arrayAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsAsign",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arrayElement ::= IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayElement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // switchStruc ::= SWITCH PARENTS IDENTIFIER PARENTC DELIMETERBLOCK caseStruc DEFAULT SEP BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura switch");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switchStruc",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // caseStruc ::= CASE SEP compAritOp SEP BLOCK BREAK ENDEXPR caseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseStruc",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // caseStruc ::= CASE SEP compAritOp SEP BLOCK BREAK ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseStruc",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
