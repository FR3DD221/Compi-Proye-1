
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proye1_compi;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\055\002\000\002\004" +
    "\004\000\002\047\004\000\002\047\004\000\002\047\005" +
    "\000\002\047\005\000\002\047\003\000\002\047\004\000" +
    "\002\047\003\000\002\047\003\000\002\047\004\000\002" +
    "\047\004\000\002\047\003\000\002\047\004\000\002\047" +
    "\004\000\002\047\003\000\002\007\005\000\002\007\004" +
    "\000\002\007\005\000\002\007\005\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\005\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\005" +
    "\000\002\007\004\000\002\007\004\000\002\007\005\000" +
    "\002\007\005\000\002\007\007\000\002\007\005\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\004\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\004\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\006\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\031\003\000\002\031\003\000\002" +
    "\010\003\000\002\010\005\000\002\010\005\000\002\012" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\004\000\002\011\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\006\000\002\011\005" +
    "\000\002\032\007\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\005\000\002\036\005\000\002" +
    "\036\004\000\002\036\003\000\002\036\003\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\041\003\000\002\041\003\000\002\006\006\000\002\006" +
    "\005\000\002\005\007\000\002\005\007\000\002\005\007" +
    "\000\002\005\007\000\002\005\007\000\002\051\007\000" +
    "\002\051\007\000\002\051\007\000\002\051\007\000\002" +
    "\051\007\000\002\052\004\000\002\053\004\000\002\034" +
    "\007\000\002\034\007\000\002\034\007\000\002\034\007" +
    "\000\002\034\007\000\002\013\010\000\002\013\012\000" +
    "\002\033\007\000\002\014\010\000\002\014\012\000\002" +
    "\045\005\000\002\045\003\000\002\046\006\000\002\046" +
    "\005\000\002\017\011\000\002\020\007\000\002\021\011" +
    "\000\002\022\014\000\002\022\014\000\002\050\014\000" +
    "\002\050\014\000\002\023\010\000\002\023\007\000\002" +
    "\025\005\000\002\025\003\000\002\024\004\000\002\054" +
    "\004\000\002\042\006\000\002\026\014\000\002\027\012" +
    "\000\002\027\011\000\002\030\021\000\002\030\017\000" +
    "\002\030\023\000\002\043\007\000\002\043\007\000\002" +
    "\043\007\000\002\043\007\000\002\043\007\000\002\044" +
    "\004\000\002\044\003\000\002\016\006\000\002\016\006" +
    "\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\010\003\000\036\000\100\000\001\002\000" +
    "\010\003\021\036\011\100\020\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\002\uffff\001" +
    "\002\000\010\004\305\047\304\112\u0179\001\002\000\004" +
    "\062\u0168\001\002\000\004\025\u015f\001\002\000\004\025" +
    "\234\001\002\000\012\002\ufff8\003\021\036\011\100\020" +
    "\001\002\000\012\002\ufff1\003\021\036\011\100\020\001" +
    "\002\000\012\002\ufffa\003\021\036\011\100\020\001\002" +
    "\000\012\002\ufff7\003\021\036\011\100\020\001\002\000" +
    "\004\062\174\001\002\000\012\002\ufff4\003\021\036\011" +
    "\100\020\001\002\000\010\004\026\047\025\112\024\001" +
    "\002\000\102\002\uff8b\003\uff8b\004\uff8b\012\uff8b\023\uff8b" +
    "\025\uff8b\030\uff8b\036\uff8b\040\uff8b\042\uff8b\044\uff8b\047" +
    "\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b" +
    "\057\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\070\uff8b\071" +
    "\uff8b\074\uff8b\077\uff8b\100\uff8b\103\uff8b\104\uff8b\105\uff8b" +
    "\106\uff8b\001\002\000\012\002\ufff5\003\021\036\011\100" +
    "\020\001\002\000\044\004\035\012\040\023\055\030\062" +
    "\040\061\042\042\051\060\052\056\053\031\054\057\055" +
    "\045\056\032\057\030\063\052\064\037\065\053\106\043" +
    "\001\002\000\004\047\027\001\002\000\044\004\035\012" +
    "\040\023\055\030\062\040\061\042\042\051\060\052\056" +
    "\053\031\054\057\055\045\056\032\057\030\063\052\064" +
    "\037\065\053\106\043\001\002\000\044\004\uff9c\012\uff9c" +
    "\023\uff9c\030\uff9c\040\uff9c\042\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\063\uff9c\064\uff9c" +
    "\065\uff9c\106\uff9c\001\002\000\044\004\uffa1\012\uffa1\023" +
    "\uffa1\030\uffa1\040\uffa1\042\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\056\uffa1\057\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\106\uffa1\001\002\000\044\004\uff9e\012\uff9e\023\uff9e" +
    "\030\uff9e\040\uff9e\042\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\063\uff9e\064\uff9e\065\uff9e" +
    "\106\uff9e\001\002\000\052\006\uffb1\012\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\041\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\107\uffb1\111\uffb1\112\uffb1\001\002\000\004\112\167" +
    "\001\002\000\056\006\uffb5\010\121\011\122\012\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\041\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\066\061" +
    "\067\106\124\107\uffb5\110\123\112\uffb5\001\002\000\052" +
    "\006\uffb9\012\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\041" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\062\uffb9\107\uffb9\111\uffb9\112" +
    "\uffb9\001\002\000\014\041\uffa6\060\uffa6\061\uffa6\107\uffa6" +
    "\112\uffa6\001\002\000\010\023\055\063\052\106\162\001" +
    "\002\000\052\006\uffb2\012\uffb2\015\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\041\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\107\uffb2" +
    "\111\uffb2\112\uffb2\001\002\000\052\006\uffb7\012\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\041\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\107\uffb7\111\uffb7\112\uffb7\001\002\000\044" +
    "\004\035\012\040\023\055\030\062\040\061\042\042\051" +
    "\060\052\056\053\031\054\057\055\045\056\032\057\030" +
    "\063\052\064\037\065\053\106\043\001\002\000\032\006" +
    "\137\012\140\041\uffab\051\060\052\056\053\031\054\057" +
    "\055\045\056\032\057\030\107\uffab\112\uffab\001\002\000" +
    "\044\004\uff9f\012\uff9f\023\uff9f\030\uff9f\040\uff9f\042\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057" +
    "\uff9f\063\uff9f\064\uff9f\065\uff9f\106\uff9f\001\002\000\010" +
    "\041\uffaa\107\uffaa\112\uffaa\001\002\000\052\006\uffbe\012" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\041\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\107\uffbe\111\uffbe\112\uffbe\001\002" +
    "\000\044\004\120\012\040\023\055\030\062\040\061\042" +
    "\042\051\060\052\056\053\031\054\057\055\045\056\032" +
    "\057\030\063\052\064\037\065\053\106\146\001\002\000" +
    "\052\006\uffc1\012\uffc1\015\112\016\114\017\113\020\115" +
    "\041\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\107\uffc1\111\uffc1" +
    "\112\uffc1\001\002\000\052\006\uffc2\012\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\041\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\107\uffc2\111\uffc2\112\uffc2\001\002\000\014\041\uffa5" +
    "\060\uffa5\061\uffa5\107\uffa5\112\uffa5\001\002\000\054\006" +
    "\uff62\012\uff62\015\uff62\016\uff62\017\uff62\020\uff62\040\061" +
    "\041\uff62\051\uff62\052\uff62\053\uff62\054\uff62\055\uff62\056" +
    "\uff62\057\uff62\060\uff62\061\uff62\062\uff62\107\uff62\111\uff62" +
    "\112\uff62\001\002\000\052\006\uffc3\012\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\041\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\107\uffc3\111\uffc3\112\uffc3\001\002\000\044\004\uff9b" +
    "\012\uff9b\023\uff9b\030\uff9b\040\uff9b\042\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\063\uff9b" +
    "\064\uff9b\065\uff9b\106\uff9b\001\002\000\044\004\uffa0\012" +
    "\uffa0\023\uffa0\030\uffa0\040\uffa0\042\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\063\uffa0\064" +
    "\uffa0\065\uffa0\106\uffa0\001\002\000\044\004\uff9d\012\uff9d" +
    "\023\uff9d\030\uff9d\040\uff9d\042\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\063\uff9d\064\uff9d" +
    "\065\uff9d\106\uff9d\001\002\000\004\062\071\001\002\000" +
    "\052\006\uffb6\012\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\041\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\107\uffb6\111\uffb6" +
    "\112\uffb6\001\002\000\014\041\uffac\060\066\061\067\107" +
    "\uffac\112\uffac\001\002\000\052\006\uffb0\012\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\041\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\062\uffb0\107\uffb0\111\uffb0\112\uffb0\001\002\000\044\004" +
    "\035\012\040\023\055\030\062\040\061\042\042\051\060" +
    "\052\056\053\031\054\057\055\045\056\032\057\030\063" +
    "\052\064\037\065\053\106\043\001\002\000\044\004\uff9a" +
    "\012\uff9a\023\uff9a\030\uff9a\040\uff9a\042\uff9a\051\uff9a\052" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\063\uff9a" +
    "\064\uff9a\065\uff9a\106\uff9a\001\002\000\044\004\uff99\012" +
    "\uff99\023\uff99\030\uff99\040\uff99\042\uff99\051\uff99\052\uff99" +
    "\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\063\uff99\064" +
    "\uff99\065\uff99\106\uff99\001\002\000\010\041\uffa4\107\uffa4" +
    "\112\uffa4\001\002\000\014\031\076\032\074\033\075\034" +
    "\073\035\072\001\002\000\004\062\107\001\002\000\004" +
    "\062\105\001\002\000\004\062\103\001\002\000\004\062" +
    "\101\001\002\000\004\062\077\001\002\000\004\004\100" +
    "\001\002\000\054\006\uff68\012\uff68\015\uff68\016\uff68\017" +
    "\uff68\020\uff68\040\uff68\041\uff68\051\uff68\052\uff68\053\uff68" +
    "\054\uff68\055\uff68\056\uff68\057\uff68\060\uff68\061\uff68\062" +
    "\uff68\107\uff68\111\uff68\112\uff68\001\002\000\004\004\102" +
    "\001\002\000\054\006\uff65\012\uff65\015\uff65\016\uff65\017" +
    "\uff65\020\uff65\040\uff65\041\uff65\051\uff65\052\uff65\053\uff65" +
    "\054\uff65\055\uff65\056\uff65\057\uff65\060\uff65\061\uff65\062" +
    "\uff65\107\uff65\111\uff65\112\uff65\001\002\000\004\004\104" +
    "\001\002\000\054\006\uff67\012\uff67\015\uff67\016\uff67\017" +
    "\uff67\020\uff67\040\uff67\041\uff67\051\uff67\052\uff67\053\uff67" +
    "\054\uff67\055\uff67\056\uff67\057\uff67\060\uff67\061\uff67\062" +
    "\uff67\107\uff67\111\uff67\112\uff67\001\002\000\004\004\106" +
    "\001\002\000\054\006\uff64\012\uff64\015\uff64\016\uff64\017" +
    "\uff64\020\uff64\040\uff64\041\uff64\051\uff64\052\uff64\053\uff64" +
    "\054\uff64\055\uff64\056\uff64\057\uff64\060\uff64\061\uff64\062" +
    "\uff64\107\uff64\111\uff64\112\uff64\001\002\000\004\004\110" +
    "\001\002\000\054\006\uff66\012\uff66\015\uff66\016\uff66\017" +
    "\uff66\020\uff66\040\uff66\041\uff66\051\uff66\052\uff66\053\uff66" +
    "\054\uff66\055\uff66\056\uff66\057\uff66\060\uff66\061\uff66\062" +
    "\uff66\107\uff66\111\uff66\112\uff66\001\002\000\052\006\uff63" +
    "\012\uff63\015\uff63\016\uff63\017\uff63\020\uff63\041\uff63\051" +
    "\uff63\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63\057\uff63" +
    "\060\uff63\061\uff63\062\uff63\107\uff63\111\uff63\112\uff63\001" +
    "\002\000\022\004\120\012\040\023\055\030\062\040\061" +
    "\042\042\063\052\106\116\001\002\000\022\004\120\012" +
    "\040\023\055\030\062\040\061\042\042\063\052\106\116" +
    "\001\002\000\022\004\120\012\040\023\055\030\062\040" +
    "\061\042\042\063\052\106\116\001\002\000\022\004\120" +
    "\012\040\023\055\030\062\040\061\042\042\063\052\106" +
    "\116\001\002\000\022\004\120\012\040\023\055\030\062" +
    "\040\061\042\042\063\052\106\116\001\002\000\052\006" +
    "\uffba\012\uffba\015\uffba\016\uffba\017\uffba\020\uffba\041\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\107\uffba\111\uffba\112\uffba" +
    "\001\002\000\062\006\uffb5\010\121\011\122\012\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\041\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\106\124\107\uffb5\110\123\111\uffb5\112\uffb5" +
    "\001\002\000\052\006\uffb4\012\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\041\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\107" +
    "\uffb4\111\uffb4\112\uffb4\001\002\000\052\006\uffb3\012\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\020\uffb3\041\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\062\uffb3\107\uffb3\111\uffb3\112\uffb3\001\002\000" +
    "\004\023\133\001\002\000\046\004\035\012\040\023\055" +
    "\030\062\040\061\042\042\051\060\052\056\053\031\054" +
    "\057\055\045\056\032\057\030\063\052\064\037\065\053" +
    "\106\043\107\127\001\002\000\006\041\131\107\uff7f\001" +
    "\002\000\004\107\130\001\002\000\052\006\uff7d\012\uff7d" +
    "\015\uff7d\016\uff7d\017\uff7d\020\uff7d\041\uff7d\051\uff7d\052" +
    "\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d" +
    "\061\uff7d\062\uff7d\107\uff7d\111\uff7d\112\uff7d\001\002\000" +
    "\052\006\uff7e\012\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e" +
    "\041\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056" +
    "\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\107\uff7e\111\uff7e" +
    "\112\uff7e\001\002\000\044\004\035\012\040\023\055\030" +
    "\062\040\061\042\042\051\060\052\056\053\031\054\057" +
    "\055\045\056\032\057\030\063\052\064\037\065\053\106" +
    "\043\001\002\000\004\107\uff80\001\002\000\004\111\134" +
    "\001\002\000\052\006\uff6f\012\uff6f\015\uff6f\016\uff6f\017" +
    "\uff6f\020\uff6f\041\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f" +
    "\055\uff6f\056\uff6f\057\uff6f\060\uff6f\061\uff6f\062\uff6f\107" +
    "\uff6f\111\uff6f\112\uff6f\001\002\000\010\006\137\012\140" +
    "\107\136\001\002\000\052\006\uffae\012\uffae\015\uffae\016" +
    "\uffae\017\uffae\020\uffae\041\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062" +
    "\uffae\107\uffae\111\uffae\112\uffae\001\002\000\022\004\120" +
    "\012\040\023\055\030\062\040\061\042\042\063\052\106" +
    "\116\001\002\000\022\004\120\012\040\023\055\030\062" +
    "\040\061\042\042\063\052\106\116\001\002\000\052\006" +
    "\uffbf\012\uffbf\015\112\016\114\017\113\020\115\041\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\107\uffbf\111\uffbf\112\uffbf" +
    "\001\002\000\052\006\uffc0\012\uffc0\015\112\016\114\017" +
    "\113\020\115\041\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\107" +
    "\uffc0\111\uffc0\112\uffc0\001\002\000\052\006\uffbc\012\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\041\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\107\uffbc\111\uffbc\112\uffbc\001\002\000" +
    "\052\006\uffbb\012\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\041\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\107\uffbb\111\uffbb" +
    "\112\uffbb\001\002\000\052\006\uffbd\012\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\041\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062" +
    "\uffbd\107\uffbd\111\uffbd\112\uffbd\001\002\000\044\004\120" +
    "\012\040\023\055\030\062\040\061\042\042\051\060\052" +
    "\056\053\031\054\057\055\045\056\032\057\030\063\052" +
    "\064\037\065\053\106\146\001\002\000\024\006\137\012" +
    "\140\051\060\052\056\053\031\054\057\055\045\056\032" +
    "\057\030\001\002\000\014\041\uffa7\060\uffa7\061\uffa7\107" +
    "\uffa7\112\uffa7\001\002\000\022\004\120\012\040\023\055" +
    "\030\062\040\061\042\042\063\052\106\116\001\002\000" +
    "\020\006\137\012\140\041\uffa9\060\uffa9\061\uffa9\107\uffa9" +
    "\112\uffa9\001\002\000\026\006\137\012\140\051\060\052" +
    "\056\053\031\054\057\055\045\056\032\057\030\107\136" +
    "\001\002\000\004\107\155\001\002\000\014\041\uffa8\060" +
    "\uffa8\061\uffa8\107\uffa8\112\uffa8\001\002\000\004\107\160" +
    "\001\002\000\010\060\066\061\067\107\155\001\002\000" +
    "\010\041\uffa2\107\uffa2\112\uffa2\001\002\000\052\006\uffb8" +
    "\012\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\041\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\107\uffb8\111\uffb8\112\uffb8\001" +
    "\002\000\022\004\120\012\040\023\055\030\062\040\061" +
    "\042\042\063\052\106\116\001\002\000\010\006\137\012" +
    "\140\107\164\001\002\000\052\006\uffaf\012\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\041\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\107\uffaf\111\uffaf\112\uffaf\001\002\000\044\004" +
    "\035\012\040\023\055\030\062\040\061\042\042\051\060" +
    "\052\056\053\031\054\057\055\045\056\032\057\030\063" +
    "\052\064\037\065\053\106\043\001\002\000\010\041\uffa3" +
    "\107\uffa3\112\uffa3\001\002\000\102\002\uff98\003\uff98\004" +
    "\uff98\012\uff98\023\uff98\025\uff98\030\uff98\036\uff98\040\uff98" +
    "\042\uff98\044\uff98\047\uff98\051\uff98\052\uff98\053\uff98\054" +
    "\uff98\055\uff98\056\uff98\057\uff98\063\uff98\064\uff98\065\uff98" +
    "\066\uff98\070\uff98\071\uff98\074\uff98\077\uff98\100\uff98\103" +
    "\uff98\104\uff98\105\uff98\106\uff98\001\002\000\004\112\171" +
    "\001\002\000\102\002\uff97\003\uff97\004\uff97\012\uff97\023" +
    "\uff97\025\uff97\030\uff97\036\uff97\040\uff97\042\uff97\044\uff97" +
    "\047\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056" +
    "\uff97\057\uff97\063\uff97\064\uff97\065\uff97\066\uff97\070\uff97" +
    "\071\uff97\074\uff97\077\uff97\100\uff97\103\uff97\104\uff97\105" +
    "\uff97\106\uff97\001\002\000\004\002\ufffb\001\002\000\004" +
    "\002\ufff3\001\002\000\014\031\201\032\200\033\177\034" +
    "\176\035\175\001\002\000\004\062\226\001\002\000\004" +
    "\062\224\001\002\000\004\062\222\001\002\000\004\062" +
    "\212\001\002\000\004\062\202\001\002\000\006\004\203" +
    "\076\204\001\002\000\010\004\uff91\047\uff91\112\uff91\001" +
    "\002\000\004\062\205\001\002\000\004\004\206\001\002" +
    "\000\004\110\207\001\002\000\004\023\210\001\002\000" +
    "\004\111\211\001\002\000\010\004\uff77\047\uff77\112\uff77" +
    "\001\002\000\006\004\213\076\214\001\002\000\010\004" +
    "\uff90\047\uff90\112\uff90\001\002\000\004\062\215\001\002" +
    "\000\004\004\216\001\002\000\004\110\217\001\002\000" +
    "\004\023\220\001\002\000\004\111\221\001\002\000\010" +
    "\004\uff76\047\uff76\112\uff76\001\002\000\004\004\223\001" +
    "\002\000\010\004\uff8f\047\uff8f\112\uff8f\001\002\000\004" +
    "\004\225\001\002\000\010\004\uff8d\047\uff8d\112\uff8d\001" +
    "\002\000\004\004\227\001\002\000\010\004\uff8e\047\uff8e" +
    "\112\uff8e\001\002\000\004\002\ufffd\001\002\000\004\002" +
    "\ufff9\001\002\000\004\002\ufff2\001\002\000\004\002\ufffe" +
    "\001\002\000\076\003\255\004\273\012\040\023\055\030" +
    "\062\036\011\040\061\042\042\044\260\047\025\051\060" +
    "\052\056\053\031\054\057\055\045\056\032\057\030\063" +
    "\052\064\037\065\053\066\247\070\266\071\243\074\262" +
    "\077\265\100\020\103\251\104\272\105\240\106\043\001" +
    "\002\000\076\004\uffc5\012\uffc5\023\uffc5\025\uffc5\030\uffc5" +
    "\036\uffc5\040\uffc5\042\uffc5\044\uffc5\047\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\070\uffc5\071\uffc5\074\uffc5\077" +
    "\uffc5\100\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\001\002" +
    "\000\076\004\uffca\012\uffca\023\uffca\025\uffca\030\uffca\036" +
    "\uffca\040\uffca\042\uffca\044\uffca\047\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\063\uffca\064" +
    "\uffca\065\uffca\066\uffca\070\uffca\071\uffca\074\uffca\077\uffca" +
    "\100\uffca\103\uffca\104\uffca\105\uffca\106\uffca\001\002\000" +
    "\076\004\uffcc\012\uffcc\023\uffcc\025\uffcc\030\uffcc\036\uffcc" +
    "\040\uffcc\042\uffcc\044\uffcc\047\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\070\uffcc\071\uffcc\074\uffcc\077\uffcc\100" +
    "\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc\001\002\000\004" +
    "\106\u015b\001\002\000\076\004\uffd5\012\uffd5\023\uffd5\025" +
    "\uffd5\030\uffd5\036\uffd5\040\uffd5\042\uffd5\044\uffd5\047\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\070\uffd5\071\uffd5" +
    "\074\uffd5\077\uffd5\100\uffd5\103\uffd5\104\uffd5\105\uffd5\106" +
    "\uffd5\001\002\000\076\004\uffd0\012\uffd0\023\uffd0\025\uffd0" +
    "\030\uffd0\036\uffd0\040\uffd0\042\uffd0\044\uffd0\047\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\063\uffd0\064\uffd0\065\uffd0\066\uffd0\070\uffd0\071\uffd0\074" +
    "\uffd0\077\uffd0\100\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0" +
    "\001\002\000\004\062\u0143\001\002\000\010\004\305\047" +
    "\304\112\u0142\001\002\000\074\004\273\012\040\023\055" +
    "\030\062\036\011\040\061\042\042\044\351\047\025\051" +
    "\060\052\056\053\031\054\057\055\045\056\032\057\030" +
    "\063\052\064\037\065\053\066\247\070\266\071\243\074" +
    "\262\077\265\100\020\103\u013b\104\272\105\240\106\043" +
    "\001\002\000\100\004\uffce\012\uffce\023\uffce\025\uffce\030" +
    "\uffce\036\uffce\040\uffce\042\uffce\044\uffce\047\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\063" +
    "\uffce\064\uffce\065\uffce\066\uffce\067\372\070\uffce\071\uffce" +
    "\074\uffce\077\uffce\100\uffce\103\uffce\104\uffce\105\uffce\106" +
    "\uffce\001\002\000\004\106\u0135\001\002\000\076\004\uffd6" +
    "\012\uffd6\023\uffd6\025\uffd6\030\uffd6\036\uffd6\040\uffd6\042" +
    "\uffd6\044\uffd6\047\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\055\uffd6\056\uffd6\057\uffd6\063\uffd6\064\uffd6\065\uffd6\066" +
    "\uffd6\070\uffd6\071\uffd6\074\uffd6\077\uffd6\100\uffd6\103\uffd6" +
    "\104\uffd6\105\uffd6\106\uffd6\001\002\000\006\062\u0131\112" +
    "\u0132\001\002\000\076\004\uffd1\012\uffd1\023\uffd1\025\uffd1" +
    "\030\uffd1\036\uffd1\040\uffd1\042\uffd1\044\uffd1\047\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\063\uffd1\064\uffd1\065\uffd1\066\uffd1\070\uffd1\071\uffd1\074" +
    "\uffd1\077\uffd1\100\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1" +
    "\001\002\000\076\004\uffd7\012\uffd7\023\uffd7\025\uffd7\030" +
    "\uffd7\036\uffd7\040\uffd7\042\uffd7\044\uffd7\047\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\063" +
    "\uffd7\064\uffd7\065\uffd7\066\uffd7\070\uffd7\071\uffd7\074\uffd7" +
    "\077\uffd7\100\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7\001" +
    "\002\000\076\004\uffd2\012\uffd2\023\uffd2\025\uffd2\030\uffd2" +
    "\036\uffd2\040\uffd2\042\uffd2\044\uffd2\047\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\070\uffd2\071\uffd2\074\uffd2\077" +
    "\uffd2\100\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2\001\002" +
    "\000\076\004\uffc4\012\uffc4\023\uffc4\025\uffc4\030\uffc4\036" +
    "\uffc4\040\uffc4\042\uffc4\044\uffc4\047\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\063\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\070\uffc4\071\uffc4\074\uffc4\077\uffc4" +
    "\100\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\001\002\000" +
    "\010\004\026\047\025\112\u0130\001\002\000\076\004\uffcb" +
    "\012\uffcb\023\uffcb\025\uffcb\030\uffcb\036\uffcb\040\uffcb\042" +
    "\uffcb\044\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\063\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\070\uffcb\071\uffcb\074\uffcb\077\uffcb\100\uffcb\103\uffcb" +
    "\104\uffcb\105\uffcb\106\uffcb\001\002\000\004\112\u012f\001" +
    "\002\000\004\112\u012e\001\002\000\004\106\u011d\001\002" +
    "\000\004\112\u011c\001\002\000\076\004\uffd8\012\uffd8\023" +
    "\uffd8\025\uffd8\030\uffd8\036\uffd8\040\uffd8\042\uffd8\044\uffd8" +
    "\047\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\057\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\070\uffd8" +
    "\071\uffd8\074\uffd8\077\uffd8\100\uffd8\103\uffd8\104\uffd8\105" +
    "\uffd8\106\uffd8\001\002\000\004\062\u0100\001\002\000\004" +
    "\106\324\001\002\000\076\004\uffcd\012\uffcd\023\uffcd\025" +
    "\uffcd\030\uffcd\036\uffcd\040\uffcd\042\uffcd\044\uffcd\047\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\070\uffcd\071\uffcd" +
    "\074\uffcd\077\uffcd\100\uffcd\103\uffcd\104\uffcd\105\uffcd\106" +
    "\uffcd\001\002\000\010\004\026\047\025\112\323\001\002" +
    "\000\010\004\305\047\304\112\303\001\002\000\004\106" +
    "\274\001\002\000\054\006\uffb5\010\121\011\122\012\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\020\uffb5\047\027\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\066" +
    "\061\067\106\124\110\123\112\uffb5\001\002\000\010\004" +
    "\276\030\275\042\277\001\002\000\004\107\302\001\002" +
    "\000\004\107\301\001\002\000\004\107\300\001\002\000" +
    "\004\112\uff5f\001\002\000\004\112\uff61\001\002\000\004" +
    "\112\uff60\001\002\000\076\004\uffd4\012\uffd4\023\uffd4\025" +
    "\uffd4\030\uffd4\036\uffd4\040\uffd4\042\uffd4\044\uffd4\047\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\070\uffd4\071\uffd4" +
    "\074\uffd4\077\uffd4\100\uffd4\103\uffd4\104\uffd4\105\uffd4\106" +
    "\uffd4\001\002\000\004\110\317\001\002\000\004\047\307" +
    "\001\002\000\102\002\uff70\003\uff70\004\uff70\012\uff70\023" +
    "\uff70\025\uff70\030\uff70\036\uff70\040\uff70\042\uff70\044\uff70" +
    "\047\uff70\051\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056" +
    "\uff70\057\uff70\063\uff70\064\uff70\065\uff70\066\uff70\070\uff70" +
    "\071\uff70\074\uff70\077\uff70\100\uff70\103\uff70\104\uff70\105" +
    "\uff70\106\uff70\001\002\000\004\110\310\001\002\000\022" +
    "\004\120\012\040\023\055\030\062\040\061\042\042\063" +
    "\052\106\116\001\002\000\012\006\137\012\140\041\315" +
    "\111\uff72\001\002\000\004\111\313\001\002\000\004\112" +
    "\314\001\002\000\102\002\uff75\003\uff75\004\uff75\012\uff75" +
    "\023\uff75\025\uff75\030\uff75\036\uff75\040\uff75\042\uff75\044" +
    "\uff75\047\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75" +
    "\056\uff75\057\uff75\063\uff75\064\uff75\065\uff75\066\uff75\070" +
    "\uff75\071\uff75\074\uff75\077\uff75\100\uff75\103\uff75\104\uff75" +
    "\105\uff75\106\uff75\001\002\000\022\004\120\012\040\023" +
    "\055\030\062\040\061\042\042\063\052\106\116\001\002" +
    "\000\004\111\uff73\001\002\000\022\004\120\012\040\023" +
    "\055\030\062\040\061\042\042\063\052\106\116\001\002" +
    "\000\004\111\321\001\002\000\004\112\322\001\002\000" +
    "\102\002\uff74\003\uff74\004\uff74\012\uff74\023\uff74\025\uff74" +
    "\030\uff74\036\uff74\040\uff74\042\uff74\044\uff74\047\uff74\051" +
    "\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74" +
    "\063\uff74\064\uff74\065\uff74\066\uff74\070\uff74\071\uff74\074" +
    "\uff74\077\uff74\100\uff74\103\uff74\104\uff74\105\uff74\106\uff74" +
    "\001\002\000\076\004\uffd3\012\uffd3\023\uffd3\025\uffd3\030" +
    "\uffd3\036\uffd3\040\uffd3\042\uffd3\044\uffd3\047\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\063" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\070\uffd3\071\uffd3\074\uffd3" +
    "\077\uffd3\100\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\001" +
    "\002\000\044\004\035\012\040\023\055\030\062\040\061" +
    "\042\042\051\060\052\056\053\031\054\057\055\045\056" +
    "\032\057\030\063\052\064\037\065\053\106\043\001\002" +
    "\000\004\107\326\001\002\000\004\025\327\001\002\000" +
    "\076\003\255\004\273\012\040\023\055\030\062\036\011" +
    "\040\061\042\042\044\260\047\025\051\060\052\056\053" +
    "\031\054\057\055\045\056\032\057\030\063\052\064\037" +
    "\065\053\066\247\070\266\071\243\074\262\077\265\100" +
    "\020\103\251\104\272\105\240\106\043\001\002\000\076" +
    "\004\273\012\040\023\055\025\345\030\062\036\011\040" +
    "\061\042\042\044\351\047\025\051\060\052\056\053\031" +
    "\054\057\055\045\056\032\057\030\063\052\064\037\065" +
    "\053\066\247\070\266\071\243\074\262\077\265\100\020" +
    "\103\341\104\272\105\240\106\043\001\002\000\076\004" +
    "\uffdb\012\uffdb\023\uffdb\025\uffdb\030\uffdb\036\uffdb\040\uffdb" +
    "\042\uffdb\044\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\070\uffdb\071\uffdb\074\uffdb\077\uffdb\100\uffdb\103" +
    "\uffdb\104\uffdb\105\uffdb\106\uffdb\001\002\000\076\004\uffe5" +
    "\012\uffe5\023\uffe5\025\uffe5\030\uffe5\036\uffe5\040\uffe5\042" +
    "\uffe5\044\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\063\uffe5\064\uffe5\065\uffe5\066" +
    "\uffe5\070\uffe5\071\uffe5\074\uffe5\077\uffe5\100\uffe5\103\uffe5" +
    "\104\uffe5\105\uffe5\106\uffe5\001\002\000\076\004\uffe4\012" +
    "\uffe4\023\uffe4\025\uffe4\030\uffe4\036\uffe4\040\uffe4\042\uffe4" +
    "\044\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4" +
    "\070\uffe4\071\uffe4\074\uffe4\077\uffe4\100\uffe4\103\uffe4\104" +
    "\uffe4\105\uffe4\106\uffe4\001\002\000\076\004\uffef\012\uffef" +
    "\023\uffef\025\uffef\030\uffef\036\uffef\040\uffef\042\uffef\044" +
    "\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef" +
    "\056\uffef\057\uffef\063\uffef\064\uffef\065\uffef\066\uffef\070" +
    "\uffef\071\uffef\074\uffef\077\uffef\100\uffef\103\uffef\104\uffef" +
    "\105\uffef\106\uffef\001\002\000\076\004\uffe1\012\uffe1\023" +
    "\uffe1\025\uffe1\030\uffe1\036\uffe1\040\uffe1\042\uffe1\044\uffe1" +
    "\047\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056" +
    "\uffe1\057\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\070\uffe1" +
    "\071\uffe1\074\uffe1\077\uffe1\100\uffe1\103\uffe1\104\uffe1\105" +
    "\uffe1\106\uffe1\001\002\000\010\004\305\047\304\112\376" +
    "\001\002\000\100\004\uffe7\012\uffe7\023\uffe7\025\uffe7\030" +
    "\uffe7\036\uffe7\040\uffe7\042\uffe7\044\uffe7\047\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\063" +
    "\uffe7\064\uffe7\065\uffe7\066\uffe7\067\372\070\uffe7\071\uffe7" +
    "\074\uffe7\077\uffe7\100\uffe7\103\uffe7\104\uffe7\105\uffe7\106" +
    "\uffe7\001\002\000\076\004\uffe9\012\uffe9\023\uffe9\025\uffe9" +
    "\030\uffe9\036\uffe9\040\uffe9\042\uffe9\044\uffe9\047\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\070\uffe9\071\uffe9\074" +
    "\uffe9\077\uffe9\100\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9" +
    "\001\002\000\006\062\366\112\367\001\002\000\076\004" +
    "\uffeb\012\uffeb\023\uffeb\025\uffeb\030\uffeb\036\uffeb\040\uffeb" +
    "\042\uffeb\044\uffeb\047\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\056\uffeb\057\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\070\uffeb\071\uffeb\074\uffeb\077\uffeb\100\uffeb\103" +
    "\uffeb\104\uffeb\105\uffeb\106\uffeb\001\002\000\076\004\uffea" +
    "\012\uffea\023\uffea\025\uffea\030\uffea\036\uffea\040\uffea\042" +
    "\uffea\044\uffea\047\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\070\uffea\071\uffea\074\uffea\077\uffea\100\uffea\103\uffea" +
    "\104\uffea\105\uffea\106\uffea\001\002\000\076\004\uffec\012" +
    "\uffec\023\uffec\025\uffec\030\uffec\036\uffec\040\uffec\042\uffec" +
    "\044\uffec\047\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055" +
    "\uffec\056\uffec\057\uffec\063\uffec\064\uffec\065\uffec\066\uffec" +
    "\070\uffec\071\uffec\074\uffec\077\uffec\100\uffec\103\uffec\104" +
    "\uffec\105\uffec\106\uffec\001\002\000\076\004\uff7a\012\uff7a" +
    "\023\uff7a\025\uff7a\030\uff7a\036\uff7a\040\uff7a\042\uff7a\044" +
    "\uff7a\047\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a" +
    "\056\uff7a\057\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\070" +
    "\uff7a\071\uff7a\074\uff7a\077\uff7a\100\uff7a\103\uff7a\104\uff7a" +
    "\105\uff7a\106\uff7a\001\002\000\010\004\026\047\025\112" +
    "\364\001\002\000\076\004\uffe3\012\uffe3\023\uffe3\025\uffe3" +
    "\030\uffe3\036\uffe3\040\uffe3\042\uffe3\044\uffe3\047\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\070\uffe3\071\uffe3\074" +
    "\uffe3\077\uffe3\100\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3" +
    "\001\002\000\004\112\363\001\002\000\004\112\362\001" +
    "\002\000\004\112\361\001\002\000\076\004\uffe0\012\uffe0" +
    "\023\uffe0\025\uffe0\030\uffe0\036\uffe0\040\uffe0\042\uffe0\044" +
    "\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\070" +
    "\uffe0\071\uffe0\074\uffe0\077\uffe0\100\uffe0\103\uffe0\104\uffe0" +
    "\105\uffe0\106\uffe0\001\002\000\076\004\uffe6\012\uffe6\023" +
    "\uffe6\025\uffe6\030\uffe6\036\uffe6\040\uffe6\042\uffe6\044\uffe6" +
    "\047\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\070\uffe6" +
    "\071\uffe6\074\uffe6\077\uffe6\100\uffe6\103\uffe6\104\uffe6\105" +
    "\uffe6\106\uffe6\001\002\000\010\004\026\047\025\112\360" +
    "\001\002\000\010\004\305\047\304\112\357\001\002\000" +
    "\076\004\uffee\012\uffee\023\uffee\025\uffee\030\uffee\036\uffee" +
    "\040\uffee\042\uffee\044\uffee\047\uffee\051\uffee\052\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\057\uffee\063\uffee\064\uffee" +
    "\065\uffee\066\uffee\070\uffee\071\uffee\074\uffee\077\uffee\100" +
    "\uffee\103\uffee\104\uffee\105\uffee\106\uffee\001\002\000\076" +
    "\004\uffed\012\uffed\023\uffed\025\uffed\030\uffed\036\uffed\040" +
    "\uffed\042\uffed\044\uffed\047\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\055\uffed\056\uffed\057\uffed\063\uffed\064\uffed\065" +
    "\uffed\066\uffed\070\uffed\071\uffed\074\uffed\077\uffed\100\uffed" +
    "\103\uffed\104\uffed\105\uffed\106\uffed\001\002\000\076\004" +
    "\uffdf\012\uffdf\023\uffdf\025\uffdf\030\uffdf\036\uffdf\040\uffdf" +
    "\042\uffdf\044\uffdf\047\uffdf\051\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\063\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\070\uffdf\071\uffdf\074\uffdf\077\uffdf\100\uffdf\103" +
    "\uffdf\104\uffdf\105\uffdf\106\uffdf\001\002\000\076\004\uffde" +
    "\012\uffde\023\uffde\025\uffde\030\uffde\036\uffde\040\uffde\042" +
    "\uffde\044\uffde\047\uffde\051\uffde\052\uffde\053\uffde\054\uffde" +
    "\055\uffde\056\uffde\057\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\070\uffde\071\uffde\074\uffde\077\uffde\100\uffde\103\uffde" +
    "\104\uffde\105\uffde\106\uffde\001\002\000\076\004\ufff0\012" +
    "\ufff0\023\ufff0\025\ufff0\030\ufff0\036\ufff0\040\ufff0\042\ufff0" +
    "\044\ufff0\047\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\070\ufff0\071\ufff0\074\ufff0\077\ufff0\100\ufff0\103\ufff0\104" +
    "\ufff0\105\ufff0\106\ufff0\001\002\000\076\004\uffe8\012\uffe8" +
    "\023\uffe8\025\uffe8\030\uffe8\036\uffe8\040\uffe8\042\uffe8\044" +
    "\uffe8\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\070" +
    "\uffe8\071\uffe8\074\uffe8\077\uffe8\100\uffe8\103\uffe8\104\uffe8" +
    "\105\uffe8\106\uffe8\001\002\000\076\004\uff8c\012\uff8c\023" +
    "\uff8c\025\uff8c\030\uff8c\036\uff8c\040\uff8c\042\uff8c\044\uff8c" +
    "\047\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056" +
    "\uff8c\057\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\070\uff8c" +
    "\071\uff8c\074\uff8c\077\uff8c\100\uff8c\103\uff8c\104\uff8c\105" +
    "\uff8c\106\uff8c\001\002\000\044\004\035\012\040\023\055" +
    "\030\062\040\061\042\042\051\060\052\056\053\031\054" +
    "\057\055\045\056\032\057\030\063\052\064\037\065\053" +
    "\106\043\001\002\000\076\004\uffdc\012\uffdc\023\uffdc\025" +
    "\uffdc\030\uffdc\036\uffdc\040\uffdc\042\uffdc\044\uffdc\047\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\070\uffdc\071\uffdc" +
    "\074\uffdc\077\uffdc\100\uffdc\103\uffdc\104\uffdc\105\uffdc\106" +
    "\uffdc\001\002\000\004\112\371\001\002\000\076\004\uffdd" +
    "\012\uffdd\023\uffdd\025\uffdd\030\uffdd\036\uffdd\040\uffdd\042" +
    "\uffdd\044\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\063\uffdd\064\uffdd\065\uffdd\066" +
    "\uffdd\070\uffdd\071\uffdd\074\uffdd\077\uffdd\100\uffdd\103\uffdd" +
    "\104\uffdd\105\uffdd\106\uffdd\001\002\000\004\025\373\001" +
    "\002\000\076\003\255\004\273\012\040\023\055\030\062" +
    "\036\011\040\061\042\042\044\260\047\025\051\060\052" +
    "\056\053\031\054\057\055\045\056\032\057\030\063\052" +
    "\064\037\065\053\066\247\070\266\071\243\074\262\077" +
    "\265\100\020\103\251\104\272\105\240\106\043\001\002" +
    "\000\076\004\273\012\040\023\055\025\375\030\062\036" +
    "\011\040\061\042\042\044\351\047\025\051\060\052\056" +
    "\053\031\054\057\055\045\056\032\057\030\063\052\064" +
    "\037\065\053\066\247\070\266\071\243\074\262\077\265" +
    "\100\020\103\341\104\272\105\240\106\043\001\002\000" +
    "\076\004\uff7b\012\uff7b\023\uff7b\025\uff7b\030\uff7b\036\uff7b" +
    "\040\uff7b\042\uff7b\044\uff7b\047\uff7b\051\uff7b\052\uff7b\053" +
    "\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b\063\uff7b\064\uff7b" +
    "\065\uff7b\066\uff7b\070\uff7b\071\uff7b\074\uff7b\077\uff7b\100" +
    "\uff7b\103\uff7b\104\uff7b\105\uff7b\106\uff7b\001\002\000\076" +
    "\004\uffe2\012\uffe2\023\uffe2\025\uffe2\030\uffe2\036\uffe2\040" +
    "\uffe2\042\uffe2\044\uffe2\047\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\070\uffe2\071\uffe2\074\uffe2\077\uffe2\100\uffe2" +
    "\103\uffe2\104\uffe2\105\uffe2\106\uffe2\001\002\000\076\004" +
    "\uff71\012\uff71\023\uff71\025\uff71\030\uff71\036\uff71\040\uff71" +
    "\042\uff71\044\uff71\047\uff71\051\uff71\052\uff71\053\uff71\054" +
    "\uff71\055\uff71\056\uff71\057\uff71\063\uff71\064\uff71\065\uff71" +
    "\066\uff71\070\uff71\071\uff71\074\uff71\077\uff71\100\uff71\103" +
    "\uff71\104\uff71\105\uff71\106\uff71\001\002\000\014\031\u0105" +
    "\032\u0103\033\u0104\034\u0102\035\u0101\001\002\000\004\062" +
    "\u011a\001\002\000\004\062\u0118\001\002\000\004\062\u0110" +
    "\001\002\000\004\062\u010e\001\002\000\004\062\u0106\001" +
    "\002\000\006\004\u0107\076\u0108\001\002\000\010\004\uff96" +
    "\047\uff96\112\uff96\001\002\000\004\062\u0109\001\002\000" +
    "\004\004\u010a\001\002\000\004\110\u010b\001\002\000\004" +
    "\023\u010c\001\002\000\004\111\u010d\001\002\000\010\004" +
    "\uff79\047\uff79\112\uff79\001\002\000\004\004\u010f\001\002" +
    "\000\010\004\uff94\047\uff94\112\uff94\001\002\000\006\004" +
    "\u0111\076\u0112\001\002\000\010\004\uff95\047\uff95\112\uff95" +
    "\001\002\000\004\062\u0113\001\002\000\004\004\u0114\001" +
    "\002\000\004\110\u0115\001\002\000\004\023\u0116\001\002" +
    "\000\004\111\u0117\001\002\000\010\004\uff78\047\uff78\112" +
    "\uff78\001\002\000\004\004\u0119\001\002\000\010\004\uff93" +
    "\047\uff93\112\uff93\001\002\000\004\004\u011b\001\002\000" +
    "\010\004\uff92\047\uff92\112\uff92\001\002\000\076\004\uffc9" +
    "\012\uffc9\023\uffc9\025\uffc9\030\uffc9\036\uffc9\040\uffc9\042" +
    "\uffc9\044\uffc9\047\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\070\uffc9\071\uffc9\074\uffc9\077\uffc9\100\uffc9\103\uffc9" +
    "\104\uffc9\105\uffc9\106\uffc9\001\002\000\004\004\u011e\001" +
    "\002\000\004\107\u011f\001\002\000\004\025\u0120\001\002" +
    "\000\004\075\u0122\001\002\000\004\102\u012a\001\002\000" +
    "\004\062\u0123\001\002\000\022\004\120\012\040\023\055" +
    "\030\062\040\061\042\042\063\052\106\116\001\002\000" +
    "\010\006\137\012\140\062\u0125\001\002\000\076\003\255" +
    "\004\273\012\040\023\055\030\062\036\011\040\061\042" +
    "\042\044\260\047\025\051\060\052\056\053\031\054\057" +
    "\055\045\056\032\057\030\063\052\064\037\065\053\066" +
    "\247\070\266\071\243\074\262\077\265\100\020\103\251" +
    "\104\272\105\240\106\043\001\002\000\074\004\273\012" +
    "\040\023\055\030\062\036\011\040\061\042\042\044\u0127" +
    "\047\025\051\060\052\056\053\031\054\057\055\045\056" +
    "\032\057\030\063\052\064\037\065\053\066\247\070\266" +
    "\071\243\074\262\077\265\100\020\103\341\104\272\105" +
    "\240\106\043\001\002\000\004\112\u0128\001\002\000\100" +
    "\004\uffde\012\uffde\023\uffde\030\uffde\036\uffde\040\uffde\042" +
    "\uffde\044\uffde\047\uffde\051\uffde\052\uffde\053\uffde\054\uffde" +
    "\055\uffde\056\uffde\057\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\070\uffde\071\uffde\074\uffde\075\u0122\077\uffde\100\uffde" +
    "\102\uff6c\103\uffde\104\uffde\105\uffde\106\uffde\001\002\000" +
    "\004\102\uff6d\001\002\000\004\062\u012b\001\002\000\076" +
    "\003\255\004\273\012\040\023\055\030\062\036\011\040" +
    "\061\042\042\044\260\047\025\051\060\052\056\053\031" +
    "\054\057\055\045\056\032\057\030\063\052\064\037\065" +
    "\053\066\247\070\266\071\243\074\262\077\265\100\020" +
    "\103\251\104\272\105\240\106\043\001\002\000\076\004" +
    "\273\012\040\023\055\025\u012d\030\062\036\011\040\061" +
    "\042\042\044\351\047\025\051\060\052\056\053\031\054" +
    "\057\055\045\056\032\057\030\063\052\064\037\065\053" +
    "\066\247\070\266\071\243\074\262\077\265\100\020\103" +
    "\341\104\272\105\240\106\043\001\002\000\076\004\uff6e" +
    "\012\uff6e\023\uff6e\025\uff6e\030\uff6e\036\uff6e\040\uff6e\042" +
    "\uff6e\044\uff6e\047\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e" +
    "\055\uff6e\056\uff6e\057\uff6e\063\uff6e\064\uff6e\065\uff6e\066" +
    "\uff6e\070\uff6e\071\uff6e\074\uff6e\077\uff6e\100\uff6e\103\uff6e" +
    "\104\uff6e\105\uff6e\106\uff6e\001\002\000\076\004\uffda\012" +
    "\uffda\023\uffda\025\uffda\030\uffda\036\uffda\040\uffda\042\uffda" +
    "\044\uffda\047\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055" +
    "\uffda\056\uffda\057\uffda\063\uffda\064\uffda\065\uffda\066\uffda" +
    "\070\uffda\071\uffda\074\uffda\077\uffda\100\uffda\103\uffda\104" +
    "\uffda\105\uffda\106\uffda\001\002\000\076\004\uffc8\012\uffc8" +
    "\023\uffc8\025\uffc8\030\uffc8\036\uffc8\040\uffc8\042\uffc8\044" +
    "\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\070" +
    "\uffc8\071\uffc8\074\uffc8\077\uffc8\100\uffc8\103\uffc8\104\uffc8" +
    "\105\uffc8\106\uffc8\001\002\000\076\004\uffcf\012\uffcf\023" +
    "\uffcf\025\uffcf\030\uffcf\036\uffcf\040\uffcf\042\uffcf\044\uffcf" +
    "\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\070\uffcf" +
    "\071\uffcf\074\uffcf\077\uffcf\100\uffcf\103\uffcf\104\uffcf\105" +
    "\uffcf\106\uffcf\001\002\000\044\004\035\012\040\023\055" +
    "\030\062\040\061\042\042\051\060\052\056\053\031\054" +
    "\057\055\045\056\032\057\030\063\052\064\037\065\053" +
    "\106\043\001\002\000\076\004\uffc6\012\uffc6\023\uffc6\025" +
    "\uffc6\030\uffc6\036\uffc6\040\uffc6\042\uffc6\044\uffc6\047\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\070\uffc6\071\uffc6" +
    "\074\uffc6\077\uffc6\100\uffc6\103\uffc6\104\uffc6\105\uffc6\106" +
    "\uffc6\001\002\000\004\112\u0134\001\002\000\076\004\uffc7" +
    "\012\uffc7\023\uffc7\025\uffc7\030\uffc7\036\uffc7\040\uffc7\042" +
    "\uffc7\044\uffc7\047\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\063\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\070\uffc7\071\uffc7\074\uffc7\077\uffc7\100\uffc7\103\uffc7" +
    "\104\uffc7\105\uffc7\106\uffc7\001\002\000\044\004\035\012" +
    "\040\023\055\030\062\040\061\042\042\051\060\052\056" +
    "\053\031\054\057\055\045\056\032\057\030\063\052\064" +
    "\037\065\053\106\043\001\002\000\004\107\u0137\001\002" +
    "\000\004\025\u0138\001\002\000\076\003\255\004\273\012" +
    "\040\023\055\030\062\036\011\040\061\042\042\044\260" +
    "\047\025\051\060\052\056\053\031\054\057\055\045\056" +
    "\032\057\030\063\052\064\037\065\053\066\247\070\266" +
    "\071\243\074\262\077\265\100\020\103\251\104\272\105" +
    "\240\106\043\001\002\000\076\004\273\012\040\023\055" +
    "\025\u013a\030\062\036\011\040\061\042\042\044\351\047" +
    "\025\051\060\052\056\053\031\054\057\055\045\056\032" +
    "\057\030\063\052\064\037\065\053\066\247\070\266\071" +
    "\243\074\262\077\265\100\020\103\341\104\272\105\240" +
    "\106\043\001\002\000\100\004\uff7c\012\uff7c\023\uff7c\025" +
    "\uff7c\030\uff7c\036\uff7c\040\uff7c\042\uff7c\044\uff7c\047\uff7c" +
    "\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057" +
    "\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\070\uff7c" +
    "\071\uff7c\074\uff7c\077\uff7c\100\uff7c\103\uff7c\104\uff7c\105" +
    "\uff7c\106\uff7c\001\002\000\006\062\u013d\112\u013c\001\002" +
    "\000\076\004\uffdc\012\uffdc\023\uffdc\025\u0141\030\uffdc\036" +
    "\uffdc\040\uffdc\042\uffdc\044\uffdc\047\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\070\uffdc\071\uffdc\074\uffdc\077\uffdc" +
    "\100\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc\001\002\000" +
    "\044\004\035\012\040\023\055\030\062\040\061\042\042" +
    "\051\060\052\056\053\031\054\057\055\045\056\032\057" +
    "\030\063\052\064\037\065\053\106\043\001\002\000\004" +
    "\112\u013f\001\002\000\076\004\uffdd\012\uffdd\023\uffdd\025" +
    "\u0140\030\uffdd\036\uffdd\040\uffdd\042\uffdd\044\uffdd\047\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\070\uffdd\071\uffdd" +
    "\074\uffdd\077\uffdd\100\uffdd\103\uffdd\104\uffdd\105\uffdd\106" +
    "\uffdd\001\002\000\102\002\uff81\003\uff81\004\uff81\012\uff81" +
    "\023\uff81\025\uff81\030\uff81\036\uff81\040\uff81\042\uff81\044" +
    "\uff81\047\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81" +
    "\056\uff81\057\uff81\063\uff81\064\uff81\065\uff81\066\uff81\070" +
    "\uff81\071\uff81\074\uff81\077\uff81\100\uff81\103\uff81\104\uff81" +
    "\105\uff81\106\uff81\001\002\000\102\002\uff82\003\uff82\004" +
    "\uff82\012\uff82\023\uff82\025\uff82\030\uff82\036\uff82\040\uff82" +
    "\042\uff82\044\uff82\047\uff82\051\uff82\052\uff82\053\uff82\054" +
    "\uff82\055\uff82\056\uff82\057\uff82\063\uff82\064\uff82\065\uff82" +
    "\066\uff82\070\uff82\071\uff82\074\uff82\077\uff82\100\uff82\103" +
    "\uff82\104\uff82\105\uff82\106\uff82\001\002\000\076\004\uffd9" +
    "\012\uffd9\023\uffd9\025\uffd9\030\uffd9\036\uffd9\040\uffd9\042" +
    "\uffd9\044\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\063\uffd9\064\uffd9\065\uffd9\066" +
    "\uffd9\070\uffd9\071\uffd9\074\uffd9\077\uffd9\100\uffd9\103\uffd9" +
    "\104\uffd9\105\uffd9\106\uffd9\001\002\000\004\004\u0144\001" +
    "\002\000\004\062\u0145\001\002\000\004\072\u0146\001\002" +
    "\000\004\062\u0147\001\002\000\004\073\u0148\001\002\000" +
    "\004\106\u0149\001\002\000\044\004\035\012\040\023\055" +
    "\030\062\040\061\042\042\051\060\052\056\053\031\054" +
    "\057\055\045\056\032\057\030\063\052\064\037\065\053" +
    "\106\043\001\002\000\006\041\u014b\107\u014c\001\002\000" +
    "\044\004\035\012\040\023\055\030\062\040\061\042\042" +
    "\051\060\052\056\053\031\054\057\055\045\056\032\057" +
    "\030\063\052\064\037\065\053\106\043\001\002\000\004" +
    "\025\u014d\001\002\000\076\003\255\004\273\012\040\023" +
    "\055\030\062\036\011\040\061\042\042\044\260\047\025" +
    "\051\060\052\056\053\031\054\057\055\045\056\032\057" +
    "\030\063\052\064\037\065\053\066\247\070\266\071\243" +
    "\074\262\077\265\100\020\103\251\104\272\105\240\106" +
    "\043\001\002\000\076\004\273\012\040\023\055\025\u014f" +
    "\030\062\036\011\040\061\042\042\044\351\047\025\051" +
    "\060\052\056\053\031\054\057\055\045\056\032\057\030" +
    "\063\052\064\037\065\053\066\247\070\266\071\243\074" +
    "\262\077\265\100\020\103\341\104\272\105\240\106\043" +
    "\001\002\000\076\004\uff6a\012\uff6a\023\uff6a\025\uff6a\030" +
    "\uff6a\036\uff6a\040\uff6a\042\uff6a\044\uff6a\047\uff6a\051\uff6a" +
    "\052\uff6a\053\uff6a\054\uff6a\055\uff6a\056\uff6a\057\uff6a\063" +
    "\uff6a\064\uff6a\065\uff6a\066\uff6a\070\uff6a\071\uff6a\074\uff6a" +
    "\077\uff6a\100\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a\001" +
    "\002\000\006\041\u0151\107\u0152\001\002\000\044\004\035" +
    "\012\040\023\055\030\062\040\061\042\042\051\060\052" +
    "\056\053\031\054\057\055\045\056\032\057\030\063\052" +
    "\064\037\065\053\106\043\001\002\000\004\025\u0153\001" +
    "\002\000\076\003\255\004\273\012\040\023\055\030\062" +
    "\036\011\040\061\042\042\044\260\047\025\051\060\052" +
    "\056\053\031\054\057\055\045\056\032\057\030\063\052" +
    "\064\037\065\053\066\247\070\266\071\243\074\262\077" +
    "\265\100\020\103\251\104\272\105\240\106\043\001\002" +
    "\000\076\004\273\012\040\023\055\025\u0155\030\062\036" +
    "\011\040\061\042\042\044\351\047\025\051\060\052\056" +
    "\053\031\054\057\055\045\056\032\057\030\063\052\064" +
    "\037\065\053\066\247\070\266\071\243\074\262\077\265" +
    "\100\020\103\341\104\272\105\240\106\043\001\002\000" +
    "\076\004\uff6b\012\uff6b\023\uff6b\025\uff6b\030\uff6b\036\uff6b" +
    "\040\uff6b\042\uff6b\044\uff6b\047\uff6b\051\uff6b\052\uff6b\053" +
    "\uff6b\054\uff6b\055\uff6b\056\uff6b\057\uff6b\063\uff6b\064\uff6b" +
    "\065\uff6b\066\uff6b\070\uff6b\071\uff6b\074\uff6b\077\uff6b\100" +
    "\uff6b\103\uff6b\104\uff6b\105\uff6b\106\uff6b\001\002\000\004" +
    "\107\u0157\001\002\000\004\025\u0158\001\002\000\076\003" +
    "\255\004\273\012\040\023\055\030\062\036\011\040\061" +
    "\042\042\044\260\047\025\051\060\052\056\053\031\054" +
    "\057\055\045\056\032\057\030\063\052\064\037\065\053" +
    "\066\247\070\266\071\243\074\262\077\265\100\020\103" +
    "\251\104\272\105\240\106\043\001\002\000\076\004\273" +
    "\012\040\023\055\025\u015a\030\062\036\011\040\061\042" +
    "\042\044\351\047\025\051\060\052\056\053\031\054\057" +
    "\055\045\056\032\057\030\063\052\064\037\065\053\066" +
    "\247\070\266\071\243\074\262\077\265\100\020\103\341" +
    "\104\272\105\240\106\043\001\002\000\076\004\uff69\012" +
    "\uff69\023\uff69\025\uff69\030\uff69\036\uff69\040\uff69\042\uff69" +
    "\044\uff69\047\uff69\051\uff69\052\uff69\053\uff69\054\uff69\055" +
    "\uff69\056\uff69\057\uff69\063\uff69\064\uff69\065\uff69\066\uff69" +
    "\070\uff69\071\uff69\074\uff69\077\uff69\100\uff69\103\uff69\104" +
    "\uff69\105\uff69\106\uff69\001\002\000\004\004\u015c\001\002" +
    "\000\004\107\u015d\001\002\000\004\112\u015e\001\002\000" +
    "\076\004\uffad\012\uffad\023\uffad\025\uffad\030\uffad\036\uffad" +
    "\040\uffad\042\uffad\044\uffad\047\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\063\uffad\064\uffad" +
    "\065\uffad\066\uffad\070\uffad\071\uffad\074\uffad\077\uffad\100" +
    "\uffad\103\uffad\104\uffad\105\uffad\106\uffad\001\002\000\076" +
    "\003\255\004\273\012\040\023\055\030\062\036\011\040" +
    "\061\042\042\044\260\047\025\051\060\052\056\053\031" +
    "\054\057\055\045\056\032\057\030\063\052\064\037\065" +
    "\053\066\247\070\266\071\243\074\262\077\265\100\020" +
    "\103\251\104\272\105\240\106\043\001\002\000\074\004" +
    "\273\012\040\023\055\030\062\036\011\040\061\042\042" +
    "\044\351\047\025\051\060\052\056\053\031\054\057\055" +
    "\045\056\032\057\030\063\052\064\037\065\053\066\247" +
    "\070\266\071\243\074\262\077\265\100\020\103\u0161\104" +
    "\272\105\240\106\043\001\002\000\006\062\u0163\112\u0162" +
    "\001\002\000\076\004\uffdc\012\uffdc\023\uffdc\025\u0167\030" +
    "\uffdc\036\uffdc\040\uffdc\042\uffdc\044\uffdc\047\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\070\uffdc\071\uffdc\074\uffdc" +
    "\077\uffdc\100\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc\001" +
    "\002\000\044\004\035\012\040\023\055\030\062\040\061" +
    "\042\042\051\060\052\056\053\031\054\057\055\045\056" +
    "\032\057\030\063\052\064\037\065\053\106\043\001\002" +
    "\000\004\112\u0165\001\002\000\076\004\uffdd\012\uffdd\023" +
    "\uffdd\025\u0166\030\uffdd\036\uffdd\040\uffdd\042\uffdd\044\uffdd" +
    "\047\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\070\uffdd" +
    "\071\uffdd\074\uffdd\077\uffdd\100\uffdd\103\uffdd\104\uffdd\105" +
    "\uffdd\106\uffdd\001\002\000\102\002\uff84\003\uff84\004\uff84" +
    "\012\uff84\023\uff84\025\uff84\030\uff84\036\uff84\040\uff84\042" +
    "\uff84\044\uff84\047\uff84\051\uff84\052\uff84\053\uff84\054\uff84" +
    "\055\uff84\056\uff84\057\uff84\063\uff84\064\uff84\065\uff84\066" +
    "\uff84\070\uff84\071\uff84\074\uff84\077\uff84\100\uff84\103\uff84" +
    "\104\uff84\105\uff84\106\uff84\001\002\000\102\002\uff85\003" +
    "\uff85\004\uff85\012\uff85\023\uff85\025\uff85\030\uff85\036\uff85" +
    "\040\uff85\042\uff85\044\uff85\047\uff85\051\uff85\052\uff85\053" +
    "\uff85\054\uff85\055\uff85\056\uff85\057\uff85\063\uff85\064\uff85" +
    "\065\uff85\066\uff85\070\uff85\071\uff85\074\uff85\077\uff85\100" +
    "\uff85\103\uff85\104\uff85\105\uff85\106\uff85\001\002\000\014" +
    "\031\u016d\032\u016b\033\u016c\034\u016a\035\u0169\001\002\000" +
    "\004\062\u0177\001\002\000\004\062\u0175\001\002\000\004" +
    "\062\u0173\001\002\000\004\062\u0171\001\002\000\004\062" +
    "\u016e\001\002\000\006\004\u0170\037\u016f\001\002\000\004" +
    "\025\uff83\001\002\000\004\025\uff8a\001\002\000\004\004" +
    "\u0172\001\002\000\004\025\uff86\001\002\000\004\004\u0174" +
    "\001\002\000\004\025\uff89\001\002\000\004\004\u0176\001" +
    "\002\000\004\025\uff88\001\002\000\004\004\u0178\001\002" +
    "\000\004\025\uff87\001\002\000\012\002\ufff6\003\021\036" +
    "\011\100\020\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\006\004\004\055\003\001\001\000\024\013" +
    "\013\014\016\033\012\034\011\047\006\050\007\051\021" +
    "\053\015\054\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\013" +
    "\013\014\016\033\012\034\011\047\232\050\007\051\021" +
    "\053\015\054\014\001\001\000\024\013\013\014\016\033" +
    "\012\034\011\047\231\050\007\051\021\053\015\054\014" +
    "\001\001\000\024\013\013\014\016\033\012\034\011\047" +
    "\230\050\007\051\021\053\015\054\014\001\001\000\024" +
    "\013\013\014\016\033\012\034\011\047\227\050\007\051" +
    "\021\053\015\054\014\001\001\000\002\001\001\000\024" +
    "\013\013\014\016\033\012\034\011\047\172\050\007\051" +
    "\021\053\015\054\014\001\001\000\004\006\022\001\001" +
    "\000\002\001\001\000\024\013\013\014\016\033\012\034" +
    "\011\047\171\050\007\051\021\053\015\054\014\001\001" +
    "\000\032\010\043\011\046\012\050\031\035\035\167\036" +
    "\062\037\045\040\047\042\040\043\053\044\032\046\063" +
    "\001\001\000\002\001\001\000\032\010\043\011\046\012" +
    "\050\031\035\035\033\036\062\037\045\040\047\042\040" +
    "\043\053\044\032\046\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\010\152\011\046\012\050\031" +
    "\035\036\156\037\155\040\047\042\040\043\053\044\032" +
    "\046\063\001\001\000\004\040\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\146" +
    "\011\046\012\050\031\035\036\147\040\047\042\040\043" +
    "\053\044\032\046\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\053\044\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\064\001\001\000\002\001\001\000\032\010\043" +
    "\011\046\012\050\031\035\035\067\036\062\037\045\040" +
    "\047\042\040\043\053\044\032\046\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\144\031\035\042\040\043\053\044\032\046" +
    "\063\001\001\000\016\011\143\031\035\042\040\043\053" +
    "\044\032\046\063\001\001\000\016\011\142\031\035\042" +
    "\040\043\053\044\032\046\063\001\001\000\016\011\116" +
    "\031\035\042\040\043\053\044\032\046\063\001\001\000" +
    "\022\010\134\011\046\012\050\031\035\042\040\043\053" +
    "\044\032\046\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\010\043\011\046\012\050\031\035\035\124\036" +
    "\062\037\045\040\047\042\040\043\053\044\032\045\125" +
    "\046\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\010\043\011\046" +
    "\012\050\031\035\035\124\036\062\037\045\040\047\042" +
    "\040\043\053\044\032\045\131\046\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\046\012\141\031\035" +
    "\042\040\043\053\044\032\046\063\001\001\000\020\011" +
    "\046\012\140\031\035\042\040\043\053\044\032\046\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\152" +
    "\011\046\012\050\031\035\036\153\040\047\042\040\043" +
    "\053\044\032\046\063\001\001\000\004\040\150\001\001" +
    "\000\002\001\001\000\022\010\151\011\046\012\050\031" +
    "\035\042\040\043\053\044\032\046\063\001\001\000\002" +
    "\001\001\000\004\040\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\162\011" +
    "\046\012\050\031\035\042\040\043\053\044\032\046\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\010" +
    "\043\011\046\012\050\031\035\035\165\036\062\037\045" +
    "\040\047\042\040\043\053\044\032\046\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\104\005\255\006" +
    "\240\007\244\010\043\011\046\012\050\013\247\014\252" +
    "\016\262\017\245\020\266\021\235\022\243\024\263\026" +
    "\236\030\256\031\035\032\234\033\012\034\011\035\260" +
    "\036\062\037\045\040\047\042\040\043\053\044\032\046" +
    "\063\050\270\051\267\052\241\053\253\054\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\376\001\001\000\102\005\345\006" +
    "\333\010\043\011\046\012\050\013\337\014\342\016\351" +
    "\017\336\020\353\021\331\022\335\024\352\026\332\030" +
    "\346\031\035\032\330\033\012\034\011\035\347\036\062" +
    "\037\045\040\047\042\040\043\053\044\032\046\063\050" +
    "\355\051\354\052\334\053\343\054\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\364\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\022\001\001" +
    "\000\004\023\305\001\001\000\002\001\001\000\004\041" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\010\310\011\046\012\050\025\311\031\035\042\040" +
    "\043\053\044\032\046\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\310\011\046\012\050\025\315\031\035\042\040\043" +
    "\053\044\032\046\063\001\001\000\002\001\001\000\024" +
    "\010\310\011\046\012\050\025\317\031\035\042\040\043" +
    "\053\044\032\046\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\010" +
    "\043\011\046\012\050\031\035\035\324\036\062\037\045" +
    "\040\047\042\040\043\053\044\032\046\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\005\255\006\240" +
    "\007\327\010\043\011\046\012\050\013\247\014\252\016" +
    "\262\017\245\020\266\021\235\022\243\024\263\026\236" +
    "\030\256\031\035\032\234\033\012\034\011\035\260\036" +
    "\062\037\045\040\047\042\040\043\053\044\032\046\063" +
    "\050\270\051\267\052\241\053\253\054\251\001\001\000" +
    "\102\005\345\006\333\010\043\011\046\012\050\013\337" +
    "\014\342\016\351\017\336\020\353\021\331\022\335\024" +
    "\352\026\332\030\346\031\035\032\330\033\012\034\011" +
    "\035\347\036\062\037\045\040\047\042\040\043\053\044" +
    "\032\046\063\050\355\051\354\052\334\053\343\054\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\364\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\022\001" +
    "\001\000\004\023\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\043" +
    "\011\046\012\050\031\035\035\367\036\062\037\045\040" +
    "\047\042\040\043\053\044\032\046\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\005\255\006\240\007\373\010\043\011\046" +
    "\012\050\013\247\014\252\016\262\017\245\020\266\021" +
    "\235\022\243\024\263\026\236\030\256\031\035\032\234" +
    "\033\012\034\011\035\260\036\062\037\045\040\047\042" +
    "\040\043\053\044\032\046\063\050\270\051\267\052\241" +
    "\053\253\054\251\001\001\000\102\005\345\006\333\010" +
    "\043\011\046\012\050\013\337\014\342\016\351\017\336" +
    "\020\353\021\331\022\335\024\352\026\332\030\346\031" +
    "\035\032\330\033\012\034\011\035\347\036\062\037\045" +
    "\040\047\042\040\043\053\044\032\046\063\050\355\051" +
    "\354\052\334\053\343\054\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\u0120\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\u0123\011\046" +
    "\012\050\031\035\042\040\043\053\044\032\046\063\001" +
    "\001\000\002\001\001\000\104\005\255\006\240\007\u0125" +
    "\010\043\011\046\012\050\013\247\014\252\016\262\017" +
    "\245\020\266\021\235\022\243\024\263\026\236\030\256" +
    "\031\035\032\234\033\012\034\011\035\260\036\062\037" +
    "\045\040\047\042\040\043\053\044\032\046\063\050\270" +
    "\051\267\052\241\053\253\054\251\001\001\000\102\005" +
    "\345\006\333\010\043\011\046\012\050\013\337\014\342" +
    "\016\351\017\336\020\353\021\331\022\335\024\352\026" +
    "\332\030\346\031\035\032\330\033\012\034\011\035\347" +
    "\036\062\037\045\040\047\042\040\043\053\044\032\046" +
    "\063\050\355\051\354\052\334\053\343\054\341\001\001" +
    "\000\002\001\001\000\004\027\u0128\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\005\255\006\240\007\u012b" +
    "\010\043\011\046\012\050\013\247\014\252\016\262\017" +
    "\245\020\266\021\235\022\243\024\263\026\236\030\256" +
    "\031\035\032\234\033\012\034\011\035\260\036\062\037" +
    "\045\040\047\042\040\043\053\044\032\046\063\050\270" +
    "\051\267\052\241\053\253\054\251\001\001\000\102\005" +
    "\345\006\333\010\043\011\046\012\050\013\337\014\342" +
    "\016\351\017\336\020\353\021\331\022\335\024\352\026" +
    "\332\030\346\031\035\032\330\033\012\034\011\035\347" +
    "\036\062\037\045\040\047\042\040\043\053\044\032\046" +
    "\063\050\355\051\354\052\334\053\343\054\341\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\010\043\011\046\012\050\031\035" +
    "\035\u0132\036\062\037\045\040\047\042\040\043\053\044" +
    "\032\046\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\043\011\046\012\050\031" +
    "\035\035\u0135\036\062\037\045\040\047\042\040\043\053" +
    "\044\032\046\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\005\255\006\240\007\u0138\010\043\011\046" +
    "\012\050\013\247\014\252\016\262\017\245\020\266\021" +
    "\235\022\243\024\263\026\236\030\256\031\035\032\234" +
    "\033\012\034\011\035\260\036\062\037\045\040\047\042" +
    "\040\043\053\044\032\046\063\050\270\051\267\052\241" +
    "\053\253\054\251\001\001\000\102\005\345\006\333\010" +
    "\043\011\046\012\050\013\337\014\342\016\351\017\336" +
    "\020\353\021\331\022\335\024\352\026\332\030\346\031" +
    "\035\032\330\033\012\034\011\035\347\036\062\037\045" +
    "\040\047\042\040\043\053\044\032\046\063\050\355\051" +
    "\354\052\334\053\343\054\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\010\043\011" +
    "\046\012\050\031\035\035\u013d\036\062\037\045\040\047" +
    "\042\040\043\053\044\032\046\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\010\043\011\046\012\050\031\035\035" +
    "\u0149\036\062\037\045\040\047\042\040\043\053\044\032" +
    "\046\063\001\001\000\002\001\001\000\032\010\043\011" +
    "\046\012\050\031\035\035\u014f\036\062\037\045\040\047" +
    "\042\040\043\053\044\032\046\063\001\001\000\002\001" +
    "\001\000\104\005\255\006\240\007\u014d\010\043\011\046" +
    "\012\050\013\247\014\252\016\262\017\245\020\266\021" +
    "\235\022\243\024\263\026\236\030\256\031\035\032\234" +
    "\033\012\034\011\035\260\036\062\037\045\040\047\042" +
    "\040\043\053\044\032\046\063\050\270\051\267\052\241" +
    "\053\253\054\251\001\001\000\102\005\345\006\333\010" +
    "\043\011\046\012\050\013\337\014\342\016\351\017\336" +
    "\020\353\021\331\022\335\024\352\026\332\030\346\031" +
    "\035\032\330\033\012\034\011\035\347\036\062\037\045" +
    "\040\047\042\040\043\053\044\032\046\063\050\355\051" +
    "\354\052\334\053\343\054\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\043\011\046\012\050\031" +
    "\035\035\u0155\036\062\037\045\040\047\042\040\043\053" +
    "\044\032\046\063\001\001\000\002\001\001\000\104\005" +
    "\255\006\240\007\u0153\010\043\011\046\012\050\013\247" +
    "\014\252\016\262\017\245\020\266\021\235\022\243\024" +
    "\263\026\236\030\256\031\035\032\234\033\012\034\011" +
    "\035\260\036\062\037\045\040\047\042\040\043\053\044" +
    "\032\046\063\050\270\051\267\052\241\053\253\054\251" +
    "\001\001\000\102\005\345\006\333\010\043\011\046\012" +
    "\050\013\337\014\342\016\351\017\336\020\353\021\331" +
    "\022\335\024\352\026\332\030\346\031\035\032\330\033" +
    "\012\034\011\035\347\036\062\037\045\040\047\042\040" +
    "\043\053\044\032\046\063\050\355\051\354\052\334\053" +
    "\343\054\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\005\255\006\240\007\u0158\010" +
    "\043\011\046\012\050\013\247\014\252\016\262\017\245" +
    "\020\266\021\235\022\243\024\263\026\236\030\256\031" +
    "\035\032\234\033\012\034\011\035\260\036\062\037\045" +
    "\040\047\042\040\043\053\044\032\046\063\050\270\051" +
    "\267\052\241\053\253\054\251\001\001\000\102\005\345" +
    "\006\333\010\043\011\046\012\050\013\337\014\342\016" +
    "\351\017\336\020\353\021\331\022\335\024\352\026\332" +
    "\030\346\031\035\032\330\033\012\034\011\035\347\036" +
    "\062\037\045\040\047\042\040\043\053\044\032\046\063" +
    "\050\355\051\354\052\334\053\343\054\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\104\005\255\006\240\007" +
    "\u015f\010\043\011\046\012\050\013\247\014\252\016\262" +
    "\017\245\020\266\021\235\022\243\024\263\026\236\030" +
    "\256\031\035\032\234\033\012\034\011\035\260\036\062" +
    "\037\045\040\047\042\040\043\053\044\032\046\063\050" +
    "\270\051\267\052\241\053\253\054\251\001\001\000\102" +
    "\005\345\006\333\010\043\011\046\012\050\013\337\014" +
    "\342\016\351\017\336\020\353\021\331\022\335\024\352" +
    "\026\332\030\346\031\035\032\330\033\012\034\011\035" +
    "\347\036\062\037\045\040\047\042\040\043\053\044\032" +
    "\046\063\050\355\051\354\052\334\053\343\054\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\043" +
    "\011\046\012\050\031\035\035\u0163\036\062\037\045\040" +
    "\047\042\040\043\053\044\032\046\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\013\013\014\016\033\012\034" +
    "\011\047\u0179\050\007\051\021\053\015\054\014\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return lex.next_token();
    }


    // Connect this parser to a scanner!
    Lexer lex;
    HashMap<String, ArrayList<String>> scopePrograma = new HashMap<String, ArrayList<String>>();
    String currentHash;
    String globalHash = "SCOPE GLOBAL";

    @SuppressWarnings("deprecation")
    public Parser(Lexer lex) {
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    public void imprimirscopePrograma () {
        System.out.println("\nTABLA DE SIMBOLOS");
        for (String key: scopePrograma.keySet()) {
            System.out.println("\n" + key);
            System.out.println("Valores: ");
            for (String item : scopePrograma.get(key)) {
             System.out.println(item);
            }
            System.out.println("");
        }
    }

    //recuperacion de errores de sintaxis
    public void syntax_error(Symbol s) {
        System.out.println("!!Error de Sintaxis en : " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    }

    //manejo de errores fatales
    public void unrecovered_syntax_error(Symbol s) {
        System.out.println("!!Error fatal en : " +  s.value + " linea: " +  (s.left+1) +  " columna: " +  (s.right+1));
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 scopePrograma.put(globalHash, new ArrayList<String>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SI ::= NT$0 GEN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 imprimirscopePrograma(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SI",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GEN ::= funcStruc GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GEN ::= mainStruc GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GEN ::= arrayInsGl ENDEXPR GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GEN ::= varInsGl ENDEXPR GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GEN ::= varInsAsigGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GEN ::= varInsAsigGl GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GEN ::= funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GEN ::= mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GEN ::= arrayInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GEN ::= varInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GEN ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GEN ::= error GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GEN ::= arrayInsAsignGl GEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GEN ::= arrayInsAsignGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GEN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOCK ::= BLOCK exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOCK ::= BLOCK varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOCK ::= BLOCK arrayInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOCK ::= BLOCK varInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOCK ::= BLOCK varInsAsigGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOCK ::= BLOCK arrayInsAsignGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOCK ::= BLOCK mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BLOCK ::= BLOCK funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BLOCK ::= BLOCK varIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BLOCK ::= BLOCK ifStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOCK ::= BLOCK ifElseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BLOCK ::= BLOCK whileStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BLOCK ::= BLOCK switchStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BLOCK ::= BLOCK forStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOCK ::= BLOCK arrayIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOCK ::= BLOCK varInsAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOCK ::= BLOCK arrayInsAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOCK ::= BLOCK printStruc ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOCK ::= BLOCK BREAK ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOCK ::= BLOCK RETURN SEP exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOCK ::= BLOCK RETURN ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOCK ::= BLOCK inputStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOCK ::= exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOCK ::= arrayIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOCK ::= arrayInsAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOCK ::= mainStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOCK ::= funcStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOCK ::= varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOCK ::= arrayInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOCK ::= varInsGl ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOCK ::= varInsAsigGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOCK ::= arrayInsAsignGl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOCK ::= varInsAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOCK ::= varIns ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOCK ::= ifStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOCK ::= ifElseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOCK ::= switchStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOCK ::= forStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOCK ::= whileStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOCK ::= printStruc ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOCK ::= BREAK ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOCK ::= RETURN SEP exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOCK ::= RETURN ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOCK ::= inputStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOCK ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // numbers ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // numbers ::= FLOATNUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // compAritOp ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // compAritOp ::= compAritOp PLUS term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo SUMA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // compAritOp ::= compAritOp MINUSW term 
            {
              Object RESULT =null;
		 System.out.println("Se hizo RESTA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compAritOp",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= term PRODUCT factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo PRODUCTO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= term DIVISION factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo COCIENTE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= term POWER factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo POTENCIA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term ::= term MODULUS factor 
            {
              Object RESULT =null;
		 System.out.println("Se hizo MODULO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= numbers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= MINUSW numbers 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= CHARSTR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= IDENTIFIER DMINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= IDENTIFIER DPLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= arrayElement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= paramList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= funcInvo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= MINUSW PARENTS compAritOp PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= PARENTS compAritOp PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // inputStruc ::= INPUT PARENTS IDENTIFIER PARENTC ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputStruc",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exprP ::= exprLog 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exprP ::= compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exprP ::= exprUni 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exprLog ::= compAritOp opRel compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exprLog ::= PARENTS exprLog PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exprLog ::= opRel exprLog 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exprLog ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exprLog ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLog",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exprUni ::= exprLog opLog exprP 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 1"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exprUni ::= IDENTIFIER opLog exprP 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exprUni ::= PARENTS exprUni PARENTC 
            {
              Object RESULT =null;
		 System.out.println("Se hizo 3"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprUni",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // opRel ::= GRATHER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opRel ::= GRATHERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opRel ::= LOWER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opRel ::= LOWERT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opRel ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opRel ::= COMPARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opRel ::= NEGATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opLog ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opLog ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLog",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // varAsig ::= IDENTIFIER EQ exprP ENDEXPR 
            {
              Object RESULT =null;
		System.out.println("Se asigno VAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAsig",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // varAsig ::= EQ exprP ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varAsig",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // varIns ::= LOC SEP INT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(currentHash).add("Instancia loc: " + ID.toString() + ":" + "INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // varIns ::= LOC SEP CHAR SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(currentHash).add("Instancia loc: " + ID.toString() + ":" + "CHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // varIns ::= LOC SEP FLOAT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(currentHash).add("Instancia loc: " + ID.toString() + ":" + "FLOAT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // varIns ::= LOC SEP BOOL SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(currentHash).add("Instancia loc: " + ID.toString() + ":" + "BOOL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // varIns ::= LOC SEP STRINGT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(currentHash).add("Instancia loc: " + ID.toString() + ":" + "STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varIns",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // varInsGl ::= GLOB SEP INT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(globalHash).add("Instancia GLOB: " + ID.toString() + ":" + "INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // varInsGl ::= GLOB SEP CHAR SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(globalHash).add("Instancia GLOB: " + ID.toString() + ":" + "CHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // varInsGl ::= GLOB SEP FLOAT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(globalHash).add("Instancia GLOB: " + ID.toString() + ":" + "FLOAT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // varInsGl ::= GLOB SEP STRINGT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(globalHash).add("Instancia GLOB: " + ID.toString() + ":" + "STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // varInsGl ::= GLOB SEP BOOL SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(globalHash).add("Instancia GLOB: " + ID.toString() + ":" + "BOOL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsGl",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // varInsAsig ::= varIns varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsAsig",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // varInsAsigGl ::= varInsGl varAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varInsAsigGl",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // funInitial ::= FUNC SEP INT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                             tipo = "tipo:func:INT";
                                                             ArrayList<String> fun = new ArrayList<String>();
                                                             currentHash = ID.toString();
                                                             fun.add(tipo);
                                                             scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // funInitial ::= FUNC SEP CHAR SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                             tipo = "tipo:func:CHAR";
                                                             ArrayList<String> fun = new ArrayList<String>();
                                                             currentHash = ID.toString();
                                                             fun.add(tipo);
                                                             scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // funInitial ::= FUNC SEP BOOL SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                             tipo = "tipo:func:BOOL";
                                                             ArrayList<String> fun = new ArrayList<String>();
                                                             currentHash = ID.toString();
                                                             fun.add(tipo);
                                                             scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // funInitial ::= FUNC SEP STRINGT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                             tipo = "tipo:func:STRING";
                                                             ArrayList<String> fun = new ArrayList<String>();
                                                             currentHash = ID.toString();
                                                             fun.add(tipo);
                                                             scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // funInitial ::= FUNC SEP FLOAT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   String tipo;
                                                             tipo = "tipo:func:FLOAT";
                                                             ArrayList<String> fun = new ArrayList<String>();
                                                             currentHash = ID.toString();
                                                             fun.add(tipo);
                                                             scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funInitial",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // funcStruc ::= funInitial DELIMETERBLOCK BLOCK RETURN ENDEXPR DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // funcStruc ::= funInitial DELIMETERBLOCK BLOCK RETURN SEP exprP ENDEXPR DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcStruc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // mainInitial ::= FUNC SEP INT SEP MAIN 
            {
              Object RESULT =null;
		                       String tipo;
                                                         tipo = "tipo:MAIN:INT";
                                                         ArrayList<String> fun = new ArrayList<String>();
                                                         currentHash = "MAIN";
                                                         fun.add(tipo);
                                                         scopePrograma.put(currentHash, fun);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainInitial",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // mainStruc ::= mainInitial DELIMETERBLOCK BLOCK RETURN ENDEXPR DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainStruc",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // mainStruc ::= mainInitial DELIMETERBLOCK BLOCK RETURN SEP exprP ENDEXPR DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainStruc",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // paramFunc ::= exprP COMA paramFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramFunc",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // paramFunc ::= exprP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramFunc",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // funcInvo ::= IDENTIFIER PARENTS paramFunc PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcInvo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // funcInvo ::= IDENTIFIER PARENTS PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcInvo",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ifStruc ::= IF PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura condicional IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStruc",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ifElseStruc ::= ifStruc ELSE DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifElseStruc",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // whileStruc ::= WHILE PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro el ciclo while");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStruc",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arrayIns ::= LOC SEP INT SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 scopePrograma.get(currentHash).add("Instancia LOC ARR: " + ID.toString() + ":" + "INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayIns",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arrayIns ::= LOC SEP CHAR SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 scopePrograma.get(currentHash).add("Instancia LOC ARR: " + ID.toString() + ":" + "CHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayIns",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arrayInsGl ::= GLOB SEP INT SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 scopePrograma.get(globalHash).add("Instancia GLOB ARR: " + ID.toString() + ":" + "INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsGl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arrayInsGl ::= GLOB SEP CHAR SEP ARRAY SEP IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 scopePrograma.get(globalHash).add("Instancia GLOB ARR: " + ID.toString() + ":" + "CHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsGl",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arrayAsig ::= IDENTIFIER EQ SQUARES elementos SQUAREC ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayAsig",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arrayAsig ::= EQ SQUARES elementos SQUAREC ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayAsig",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // elementos ::= compAritOp COMA elementos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // elementos ::= compAritOp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arrayInsAsign ::= arrayIns arrayAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsAsign",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arrayInsAsignGl ::= arrayInsGl arrayAsig 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayInsAsignGl",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arrayElement ::= IDENTIFIER SQUARES INTEGER_LITERAL SQUAREC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayElement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // switchStruc ::= SWITCH PARENTS IDENTIFIER PARENTC DELIMETERBLOCK caseStruc DEFAULT SEP BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;
		System.out.println("Se declaro estructura switch");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switchStruc",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // caseStruc ::= CASE SEP compAritOp SEP BLOCK BREAK ENDEXPR caseStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseStruc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // caseStruc ::= CASE SEP compAritOp SEP BLOCK BREAK ENDEXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caseStruc",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // forStruc ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTS exprP COMA exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStruc",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // forStruc ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTS exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStruc",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // forStruc ::= FOR SEP IDENTIFIER SEP IN SEP RANGE PARENTS exprP COMA exprP COMA exprP PARENTC DELIMETERBLOCK BLOCK DELIMETERBLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStruc",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // paramStruc ::= PARAM SEP INT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(currentHash).add("Instancia PARAM: " + ID.toString() + ":" + "INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // paramStruc ::= PARAM SEP CHAR SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(currentHash).add("Instancia PARAM: " + ID.toString() + ":" + "CHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // paramStruc ::= PARAM SEP STRINGT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(currentHash).add("Instancia PARAM: " + ID.toString() + ":" + "STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // paramStruc ::= PARAM SEP FLOAT SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(currentHash).add("Instancia PARAM: " + ID.toString() + ":" + "FLOAT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // paramStruc ::= PARAM SEP BOOL SEP IDENTIFIER 
            {
              Object RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ID = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 scopePrograma.get(currentHash).add("Instancia PARAM: " + ID.toString() + ":" + "BOOL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramStruc",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // paramList ::= paramStruc paramList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // paramList ::= paramStruc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // printStruc ::= PRINT PARENTS IDENTIFIER PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStruc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // printStruc ::= PRINT PARENTS CHARSTR PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStruc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // printStruc ::= PRINT PARENTS STRING_LITERAL PARENTC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printStruc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
